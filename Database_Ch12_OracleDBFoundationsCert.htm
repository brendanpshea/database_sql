<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Avenir Next LT Pro";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:16.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	text-align:center;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	font-weight:normal;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	font-weight:normal;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:10.5pt;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:20.0pt;
	margin-left:0in;
	text-align:center;
	border:none;
	padding:0in;
	font-size:36.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#44546A;
	text-transform:uppercase;
	letter-spacing:1.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0in;
	text-align:center;
	border:none;
	padding:0in;
	font-size:36.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#44546A;
	text-transform:uppercase;
	letter-spacing:1.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0in;
	text-align:center;
	border:none;
	padding:0in;
	font-size:36.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#44546A;
	text-transform:uppercase;
	letter-spacing:1.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:20.0pt;
	margin-left:0in;
	text-align:center;
	border:none;
	padding:0in;
	font-size:36.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#44546A;
	text-transform:uppercase;
	letter-spacing:1.5pt;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:125%;
	font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri Light",sans-serif;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Calibri Light",sans-serif;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Calibri Light",sans-serif;
	color:#44546A;
	text-transform:uppercase;
	letter-spacing:1.5pt;}
.MsoChpDefault
	{font-size:10.5pt;
	font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:125%;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link="#0563C1" vlink="#954F72" style='word-wrap:break-word'>

<div class=WordSection1>

<div style='border-top:solid #A5A5A5 1.0pt;border-left:none;border-bottom:solid #A5A5A5 1.0pt;
border-right:none;padding:8.0pt 0in 8.0pt 0in'>

<p class=MsoTitle>Oracle Database Foundations Study Guide</p>

</div>

<p class=MsoNormal>The Oracle Database Foundations Exam (Number: 1Z0-006) is a
globally recognized qualification that can validate your skills in the eyes of
potential employers and give you an edge in the increasingly competitive field
of data management. It tests your understanding of key concepts, practical
skills, and best practices in designing, implementing, and managing Oracle (and
other RDBMS) databases. You can register for the exam here: <a
href="https://education.oracle.com/oracle-database-foundations-novice-level-exam/pexam_1Z0-006">https://education.oracle.com/oracle-database-foundations-novice-level-exam/pexam_1Z0-006</a>.</p>

<p class=MsoNormal><b>Taking this exam is optional! </b>However, the final exam
for this class will ALSO be based on the content here (which pulls together
much of what we’ve been learning over the course of the semester). </p>

<p class=MsoNormal>In order to prepare for this important step in your
professional development, I've put together a comprehensive study guide that
outlines all the key learning outcomes that the exam will cover. This guide
should serve as both a summary of the course content and as a revision tool for
you to check your understanding.</p>

<p class=MsoNormal>The study guide is divided into 26 sections, starting from
the very basics of what a database is, moving through different database
models, discussing levels of data abstraction, the process of gathering
requirements for database design, defining tables, utilizing conceptual data
modeling, identifying unique identifiers, and many other key topics. As we move
further into the guide, it delves into more complex topics such as resolving
many-to-many relationships, tracking data changes over time, and using SQL.</p>

<p class=MsoNormal>In addition to understanding the theoretical knowledge,
you'll also need to apply it practically by using SQL to manage data, tables,
and relationships in Oracle Database. This includes writing queries,
manipulating data, and managing transactions.</p>

<p class=MsoNormal>Lastly, the guide walks you through specific SQL operations
such as SELECT statements, WHERE and ORDER BY clauses, as well as different
types of table joins.</p>

<p class=MsoNormal>Remember, this study guide is not meant to introduce new
content; rather, it is a roadmap to revising and consolidating the topics
you've already studied during our course. It will remind you of the key points
and give you a solid foundation to build upon as you prepare for the Oracle
Certification Exam.</p>

<p class=MsoNormal>Studying for and achieving this certification will not only
validate the knowledge and skills you've acquired throughout this course, but
it will also increase your marketability as a data professional and expand your
career opportunities. Whether you are looking to break into a new role or
elevate your current position, the Oracle Certification can help you achieve
your goals.</p>

<p class=MsoNormal>So, I encourage you to take full advantage of this study
guide and view the upcoming Oracle Certification Exam as an opportunity to
shine and demonstrate your proficiency. I'm confident in your ability to do
well, and I'm here to support you as you prepare.</p>

<p class=MsoNormal>Best of luck in your studies!</p>

<p class=MsoToc1><a href="#_Toc140584349">What is a Database?<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc140584350">1: Understanding What is a Database?<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>3</span></a></p>

<p class=MsoToc2><a href="#_Toc140584351">2: Describe types of database models
(relational, object-oriented, flat, network...)<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></p>

<p class=MsoToc2><a href="#_Toc140584352">3: Relational Database Concepts<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>4</span></a></p>

<p class=MsoToc2><a href="#_Toc140584353">4: Defining Levels of Data
Abstraction<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>5</span></a></p>

<p class=MsoToc1><a href="#_Toc140584354">The Language of Database and Data
Modeling<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc140584355">6: Defining a Table in a Database<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc140584356">7: Using Conceptual Data Modeling<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>7</span></a></p>

<p class=MsoToc2><a href="#_Toc140584357">8: Defining Instance and Schema in
Relational Databases<span style='color:windowtext;display:none;text-decoration:
none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></p>

<p class=MsoToc2><a href="#_Toc140584358">9: Using Unique Identifiers, Primary
and Foreign Keys<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>8</span></a></p>

<p class=MsoToc1><a href="#_Toc140584359">Data Modeling – Creating the Physical
Model<span style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>9</span></a></p>

<p class=MsoToc2><a href="#_Toc140584360">10: Creating Physical Data Models<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>10</span></a></p>

<p class=MsoToc2><a href="#_Toc140584361">11: Documenting Business Requirements
and Rules<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>10</span></a></p>

<p class=MsoToc2><a href="#_Toc140584362">12: Defining Supertype and Subtype
Entity Relationships<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>11</span></a></p>

<p class=MsoToc2><a href="#_Toc140584363">13: Using Attributes<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>12</span></a></p>

<p class=MsoToc2><a href="#_Toc140584364">13.4: Distinguish between volatile
and nonvolatile attributes<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>12</span></a></p>

<p class=MsoToc2><a href="#_Toc140584365">14: Using Unique Identifiers (UIDs)<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>12</span></a></p>

<p class=MsoToc2><a href="#_Toc140584366">15: Identifying Relationships<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>13</span></a></p>

<p class=MsoToc2><a href="#_Toc140584367">17: Identifying Hierarchical,
Recursive, and Arc Relationships<span style='color:windowtext;display:none;
text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></p>

<p class=MsoToc2><a href="#_Toc140584368">18: Tracking Data Changes Over Time<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>17</span></a></p>

<p class=MsoToc1><a href="#_Toc140584369">19: Validating Data Using
Normalization<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></p>

<p class=MsoToc1><a href="#_Toc140584370">Mapping the Physical Model<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>19</span></a></p>

<p class=MsoToc2><a href="#_Toc140584371">21: Mapping Primary, Composite
Primary, and Foreign Keys<span style='color:windowtext;display:none;text-decoration:
none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>20</span></a></p>

<p class=MsoToc1><a href="#_Toc140584372">Introduction to SQL<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></p>

<p class=MsoToc2><a href="#_Toc140584373">22: Using Structured Query Language
(SQL)<span style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></p>

<p class=MsoToc2><a href="#_Toc140584374">24: Using Data Manipulation Language
(DML) and Transaction Control Language (TCL)<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>22</span></a></p>

<p class=MsoToc2><a href="#_Toc140584375">25: Defining and Using Basic Select
Statements<span style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>23</span></a></p>

<p class=MsoToc2><a href="#_Toc140584376">26: Defining Table Joins<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>24</span></a></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc140584144"></a><a name="_Toc140584349">What is a Database?</a></h1>

<h2><br>
<a name="_Toc140584145"></a><a name="_Toc140584350">1: Understanding What is a
Database?</a></h2>

<p class=MsoNormal>A database is an organized collection of data that is
structured to facilitate efficient retrieval, modification, and storage
operations. Databases are fundamental to many areas of technology and business,
as they provide a systematic way of managing large amounts of data in a
structured format.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Remember that a database is more than
just a collection of data. It's structured to allow efficient operations (like
retrieval, modification, and storage).</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The information in a database can range
from simple text to multimedia content.</span></p>

<p class=MsoNormal>Example: A university database might include tables for
students, courses, and enrollment. Each table contains data related to a
specific aspect, like students' names, course details, and which student is
enrolled in which course.</p>

<h3><a name="_Toc140584146">1.1: Describe the components of a database system</a></h3>

<p class=MsoNormal>A database system typically consists of the actual data, a
database management system (DBMS), and the applications that interact with the
data.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A database system is composed of the
actual data, the DBMS, and user applications.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The DBMS manages interactions between
the database and the applications or users. It handles data organization,
storage, and security.</span></p>

<p class=MsoNormal>Example: In an e-commerce website, the product information
is the data, MySQL could be the DBMS, and the website itself is the user
application interacting with the database.</p>

<h3><a name="_Toc140584147">1.2: Explain the purpose of a database</a></h3>

<p class=MsoNormal>The main purpose of a database is to provide a way to store
and retrieve data efficiently. It ensures data consistency, integrity, and
security, and provides mechanisms for concurrent access and recovery from
failures.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Databases are designed to manage data
efficiently, ensuring consistency and integrity.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They provide mechanisms for concurrent
access, allowing multiple users or applications to interact with the data
simultaneously without conflicts.</span></p>

<p class=MsoNormal>Example: Banks use databases to manage customer account
data. They allow multiple transactions to occur at the same time (concurrent
access) while ensuring the accuracy and consistency of each customer's account
balance.</p>

<h2><a name="_Toc140584148"></a><a name="_Toc140584351">2: Describe types of
database models (relational, object-oriented, flat, network...)</a></h2>

<p class=MsoNormal>There are several types of database models including the
relational model, object-oriented model, flat model, network model, and others.
Each model has a unique way of organizing and structuring data.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The relational model organizes data
into tables (or relations), and relationships are established using primary and
foreign keys.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Object-oriented databases organize data
as objects and support inheritance, encapsulation, and polymorphism.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Flat databases consist of a single
table or list with no relation between different records.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: A relational database might
contain a table for &quot;Customers&quot; and a table for &quot;Orders&quot;.
The &quot;Orders&quot; table might include a &quot;CustomerID&quot; column,
which matches the &quot;ID&quot; in the &quot;Customers&quot; table, establishing
a relationship between these two tables.</span></p>

<h3><a name="_Toc140584149">2.1: Compare the differences between the different
types of databases</a></h3>

<p class=MsoNormal>Different types of databases are optimized for specific
uses, based on how they structure and manage data.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Relational databases are ideal for
structured data with defined relationships, and they are commonly used in
business applications.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Object-oriented databases are good for
complex data structures like those used in artificial intelligence or machine
learning.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Flat databases are simple and
straightforward but lack the sophistication to handle complex data
relationships.</span></p>

<p class=MsoNormal>Example: A relational database is suitable for an inventory
system where data is structured and relationships between entities (like
products and suppliers) are necessary, while an object-oriented database is
more suitable for a computer-aided design (CAD) system where data entities have
complex relationships and attributes.</p>

<h2><a name="_Toc140584150"></a><a name="_Toc140584352">3: Relational Database
Concepts</a></h2>

<p class=MsoNormal>Relational databases are the most commonly used type of
database, designed around a set of tables that are related to each other
through common attributes.</p>

<h3><a name="_Toc140584151">3.1: Describe the characteristics of a relational
database</a></h3>

<p class=MsoNormal>Relational databases have specific characteristics that
allow efficient data storage, retrieval, and management.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Relational databases are based on the
relational model, where data is organized in tables.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Each table has a unique key (primary
key) that identifies each record, and foreign keys establish relationships
between tables.</span></p>

<p class=MsoNormal>Example: An &quot;Orders&quot; table might include a
&quot;ProductID&quot; column. This &quot;ProductID&quot; is a foreign key
referencing the primary key of a &quot;Products&quot; table, creating a
relationship between the tables.</p>

<h3><a name="_Toc140584152">3.2: Explain the importance of relational databases
in business</a></h3>

<p class=MsoNormal>Relational databases play a crucial role in businesses due
to their efficiency, flexibility, and security.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Relational databases provide efficient
data management, allowing businesses to process large volumes of data quickly.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They support ACID (Atomicity,
Consistency, Isolation, Durability) properties, ensuring data integrity and
reliability, which are essential for business operations.</span></p>

<p class=MsoNormal>Example: Retail businesses use relational databases to
manage their inventory, customer information, and sales data. The relationships
between these data entities (products, customers, sales) help in generating
insights for decision making.</p>

<h3><a name="_Toc140584153">3.3: List the major transformations in database
technology</a></h3>

<p class=MsoNormal>Database technology has evolved significantly over time to
meet the changing needs of data storage and management.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The transition from hierarchical and
network databases to relational databases for better data accessibility and
flexibility.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The introduction of NoSQL databases
(like MongoDB, Cassandra) for handling big data and real-time web applications.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The development of NewSQL databases
(like Google Spanner, CockroachDB) that aim to provide the scalability of NoSQL
systems and the ACID guarantees of relational databases.</span></p>

<p class=MsoNormal>Example: The advent of cloud-based databases (like Amazon
RDS, Google Cloud SQL) offers scalability and flexibility, changing how
businesses handle their data storage needs.</p>

<h2><a name="_Toc140584154"></a><a name="_Toc140584353">4: Defining Levels of
Data Abstraction</a></h2>

<p class=MsoNormal>Database abstraction involves viewing data and structures on
different levels to simplify complex database systems.</p>

<h3><a name="_Toc140584155">4.1: Define the terminology used for database
storage</a></h3>

<p class=MsoNormal>There are specific terms used to refer to different aspects
of database storage.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Data block: The smallest unit of data
storage in a database that a single read/write operation can address.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Table: A set of data elements that are
organized using a model of vertical columns and horizontal rows.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Index: A database structure that
improves the speed of data retrieval operations on a database table.</span></p>

<p class=MsoNormal>Example: When a search is performed on a table with an
index, the database uses the index (much like a book's index) to find the
required data without having to search each row in the table.</p>

<h3><a name="_Toc140584156">4.2: Describe levels of data abstraction used in
relational databases</a></h3>

<p class=MsoNormal>Relational databases operate at three levels of data
abstraction: physical, logical, and conceptual.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Physical level: This is the lowest
level of data abstraction that deals with how data is stored physically in
memory. Concerns the particulars of the database management chosen (such as
Oracle, SQLite, or Postgres) and the storage technology (cloud, hard drive),
etc.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Conceptual Level: This is the highest
level of abstraction and it allows users to interact with the database, often
in a way that is customized to their needs. Represented using ERDs.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Note: The Oracle  exams contains only
the “conceptual level” (everything before SQL code is written) and “physical
level” (everything after).</span></p>

<p class=MsoNormal>Example: In a university database the conceptual level
organization of entities and their attributes (as an ERD) would be at the
conceptual level). The physical level would involve implementing this on an
Oracle DBMS on some particular system (local, network, or cloud.). </p>

<h3><a name="_Toc140584157">5: Gathering Requirements for Database Design</a></h3>

<p class=MsoNormal>Designing a database starts with gathering requirements.
It's crucial to understand what the database will be used for, what data it
will store, and how users will interact with it.</p>

<h3><a name="_Toc140584158">5.1: Gather requirements to implement a database
solution</a></h3>

<p class=MsoNormal>Requirements gathering is a critical first step in database
design.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Understand the scope of the database:
what data it needs to store, what operations it needs to support, and who will
use it.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Identify the entities that the database
will include, the attributes of these entities, and the relationships between
them.</span></p>

<p class=MsoNormal>Example: If designing a database for a library, you'd need
to know the different types of data to be stored (books, authors, borrowers),
operations (check-out, return, reserve), and who will use the system
(librarians, borrowers).</p>

<h3><a name="_Toc140584159">5.2: Explain business rules</a></h3>

<p class=MsoNormal>Business rules define the operations, definitions and
constraints that apply to an organization's activities.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Business rules can affect database
design by determining the structure, relationships, and constraints of the
data.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They are often derived from the
policies, practices, and procedures of an organization.</span></p>

<p class=MsoNormal>Example: A business rule in a library might be that a
borrower can only check out five books at a time. This would affect the design
of the library database, possibly leading to a &quot;Checkouts&quot; table with
a limit of five records per borrower.</p>

<h1><a name="_Toc140584160"></a><a name="_Toc140584354">The Language of
Database and Data Modeling</a></h1>

<h2><a name="_Toc140584161"></a><a name="_Toc140584355">6: Defining a Table in
a Database</a></h2>

<p class=MsoNormal>Tables are fundamental components of relational databases,
storing data in a structured format.</p>

<h3><a name="_Toc140584162">6.1: Describe the structure of a single table</a></h3>

<p class=MsoNormal>A table in a database has a specific structure designed to
store data efficiently.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A table is made up of columns and rows,
where each column represents a specific attribute, and each row represents a
record.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Tables should include a primary key, a
unique identifier for each record.</span></p>

<p class=MsoNormal>Example: In a &quot;Customers&quot; table, each column might
represent attributes like CustomerID, Name, Address, and Phone Number. Each row
would represent a single customer, and the CustomerID could be the primary key.</p>

<h2><a name="_Toc140584163"></a><a name="_Toc140584356">7: Using Conceptual
Data Modeling</a></h2>

<p class=MsoNormal>Conceptual data modeling is a high-level representation of
the data structures of an organization, showing the relationships between
different entities.</p>

<h3><a name="_Toc140584164"><span style='color:black'>7.1: Describe a
conceptual data model</span></a></h3>

<p class=MsoNormal>A conceptual data model provides a big-picture view of an
organization's data requirements.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>It focuses on identifying the entities,
their attributes, and their relationships.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>It's independent of any specific
database system or technology.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: For a university, a conceptual
data model might include entities like Student, Course, and Department. The
relationships could be Student-enrolls-in-Course, and Department-offers-Course.</span></p>

<h3><a name="_Toc140584165"><span style='color:black'>7.2: Explain the
components of a conceptual/logical model</span></a></h3>

<p class=MsoNormal>A conceptual/logical model includes entities, relationships,
and attributes.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Entities are the main objects or
concepts (like Student, Course).</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Relationships are the associations
between entities (like &quot;Student takes Course&quot;).</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Attributes are the properties or
characteristics of entities (like &quot;StudentName&quot; for the Student
entity).</span></p>

<p class=MsoNormal>Example: In a hospital database, the entities could include
Patient, Doctor, and Appointment. Relationships might be &quot;Patient sees
Doctor&quot; and &quot;Patient has Appointment&quot;. Attributes of the Patient
entity could include PatientID, Name, and Address.</p>

<h2><br>
<a name="_Toc140584166"></a><a name="_Toc140584357">8: Defining Instance and
Schema in Relational Databases</a></h2>

<p class=MsoNormal>In a relational database, the term &quot;instance&quot;
refers to a specific occurrence of data, and &quot;schema&quot; refers to the
overall structure of the database.</p>

<h3><a name="_Toc140584167"><span style='color:black'>8.1: Examine examples of
an entity and a corresponding table</span></a></h3>

<p class=MsoNormal>In a relational database, an entity is represented as a
table.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>An entity is an object or concept about
which data is stored.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Each instance of an entity corresponds
to a row (or record) in the table.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: Consider an entity
&quot;Student&quot; in a university database. This would be represented as a
table &quot;Students&quot; where each row represents a different student.</span></p>

<h3><a name="_Toc140584168"><span style='color:black'>8.2: Examine examples of
an attribute and a corresponding column</span></a></h3>

<p class=MsoNormal>Attributes of an entity are represented as columns in a
table.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>An attribute is a characteristic or
property of an entity.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Each attribute corresponds to a column
in the table.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: For the &quot;Students&quot;
table, attributes of the &quot;Student&quot; entity such as
&quot;StudentID&quot;, &quot;Name&quot;, &quot;Major&quot;, and &quot;GPA&quot;
would each be represented as a column in the table.</span></p>

<h3><a name="_Toc140584169"><span style='color:black'>8.3: Explain instances
and schemas in a relational database</span></a></h3>

<p class=MsoNormal>In a relational database, an instance and a schema have
specific meanings.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>An instance of a database is a snapshot
of the database at a given point in time. It includes the current contents of
all its tables.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The schema of a database is the overall
design of the database, including the tables, the fields in each table, and the
relationships between fields and tables.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In a university database, the
schema would include the design of tables like &quot;Students&quot;,
&quot;Courses&quot;, and &quot;Enrollments&quot;, and their relationships. An
instance of the database could be the state of the database on the first day of
the semester, including all the student records, course offerings, and
enrollment data.</span></p>

<h2><a name="_Toc140584170"></a><a name="_Toc140584358">9: Using Unique
Identifiers, Primary and Foreign Keys</a></h2>

<p class=MsoNormal>Unique identifiers, primary keys, and foreign keys are
integral to defining and understanding the relationships between tables in a
relational database.</p>

<h3><a name="_Toc140584171"><span style='color:black'>9.1: Identify unique
identifiers and a corresponding primary key</span></a></h3>

<p class=MsoNormal>A unique identifier is an attribute or set of attributes
that uniquely identifies each record in a table. This corresponds to the
primary key.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A primary key is a special relational
database table column (or combination of columns) designated to uniquely
identify each table record.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In a &quot;Students&quot;
table, the &quot;StudentID&quot; could be a unique identifier for each student
and serve as the primary key.</span></p>

<h3><a name="_Toc140584172"><span style='color:black'>9.2: Define composite and
compound primary keys</span></a></h3>

<p class=MsoNormal>Composite and compound keys are types of primary keys that
use multiple columns to create a unique identifier.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A composite primary key consists of two
or more columns that together uniquely identify each record. </span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A compound primary key consists of two
or more columns that are primary keys of OTHER tables (which are together a
primary key for the table in question).</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In a
&quot;CourseRegistrations&quot; table, the composite key might be made up of
&quot;StudentID&quot; and &quot;CourseID&quot; - no two rows could have the
same combination of these values. This would also be a compound key if they
were keys to other tables.</span></p>

<h3><a name="_Toc140584173"><span style='color:black'>9.3: Define relationships
and corresponding foreign keys</span></a></h3>

<p class=MsoNormal>Foreign keys are used to establish relationships between
tables in a relational database.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A foreign key is a column or group of
columns in a table that is used to establish a link between the data in two
tables.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The foreign key in one table points to
the primary key in another table.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In an &quot;Orders&quot;
table, &quot;CustomerID&quot; could be a foreign key linking each order to a
record in the &quot;Customers&quot; table.</span></p>

<h3><a name="_Toc140584174"><span style='color:black'>9.4: Define barred
relationships and the corresponding primary keys</span></a></h3>

<p class=MsoNormal>Barred relationships are a specific type of relationship
used in data modeling where the unique identifier of an intersection entity
comes from the originating relationships.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>In these relationships, bars are used
to indicate that the primary key of the intersection entity includes foreign
keys from both of the originating entities.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>The relationships from the originating
entities to the intersection entity are therefore called &quot;barred&quot;
relationships because of these bars.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: Consider a
&quot;Students&quot; entity and a &quot;Courses&quot; entity. If a student can
enroll in multiple courses and a course can have multiple students, an
intersection entity, &quot;Enrollment&quot;, might be used to manage this
many-to-many relationship. In this &quot;Enrollment&quot; entity, the primary
key would be a composite of &quot;StudentID&quot; and &quot;CourseID&quot;,
both of which are foreign keys from the &quot;Students&quot; and
&quot;Courses&quot; entities, respectively. The relationships from
&quot;Students&quot; and &quot;Courses&quot; to &quot;Enrollment&quot; would be
considered &quot;barred&quot; relationships.</span></p>

<h1><a name="_Toc140584175"></a><a name="_Toc140584359">Data Modeling –
Creating the Physical Model</a></h1>

<p class=MsoNormal>&nbsp;</p>

<h2><a name="_Toc140584176"></a><a name="_Toc140584360">10: Creating Physical
Data Models</a></h2>

<p class=MsoNormal>Physical data models represent how data is physically stored
in the database, including details about the database's actual structure, such
as tables, relationships, indexes, partitions, and materialized views.</p>

<h3><a name="_Toc140584177"><span style='color:black'>10.1: Create a physical
data model</span></a></h3>

<p class=MsoNormal>Creating a physical data model involves transforming the
logical model into a set of SQL statements that define the database's actual
structure.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Determine the tables, columns, and data
types based on the logical model.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Define the primary keys, foreign keys,
and any other constraints.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Include performance-enhancing
structures like indexes, partitions, and materialized views.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: An &quot;Orders&quot; table in
the logical model might be implemented in the physical model with an Orders
table having columns like OrderID (integer), CustomerID (integer), and
OrderDate (date), and an index on CustomerID to enhance lookup performance.</span></p>

<h3><a name="_Toc140584178"><span style='color:black'>10.2: Compare conceptual
and physical data models</span></a></h3>

<p class=MsoNormal>Conceptual and physical data models serve different purposes
in the database design process.</p>

<p class=MsoNormal>A conceptual data model focuses on identifying the entities,
attributes, and relationships without concern for how they'll be implemented in
a specific database system.</p>

<p class=MsoNormal>A physical data model includes the specific implementation
details for a particular database system, including table definitions, columns,
data types, constraints, and performance structures.</p>

<p class=MsoNormal>Example: In a conceptual model, you might define a
&quot;Customer&quot; entity with attributes and relationships. In a physical
model, you'd implement this as a &quot;Customers&quot; table with specific
columns, data types, and relationships to other tables.</p>

<h2><a name="_Toc140584179"></a><a name="_Toc140584361">11: Documenting
Business Requirements and Rules</a></h2>

<p class=MsoNormal>Clearly communicating and accurately capturing database
information requirements are critical steps in designing a database that meets
the needs of the business or organization.</p>

<h3><a name="_Toc140584180"><span style='color:black'>11.1: Identify structural
business rules</span></a></h3>

<p class=MsoNormal>Structural business rules define the static aspects of a
business, often related to how the data is organized or structured.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They often correspond to constraints in
the database schema.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: A rule that each customer must
have a unique customer ID corresponds to a primary key constraint on the
CustomerID column in the &quot;Customers&quot; table.</span></p>

<h3><a name="_Toc140584181"><span style='color:black'>11.2: Identify procedural
business rules</span></a></h3>

<p class=MsoNormal>Procedural business rules define the dynamic or operational
aspects of a business, often related to processes or operations.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They might be enforced by triggers or
stored procedures in the database.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: A rule that an order cannot be
shipped if it hasn't been paid for might be enforced by a stored procedure that
checks payment status before changing the order status to 'shipped'.</span></p>

<h3><a name="_Toc140584182"><span style='color:black'>11.3: Identify business
rules that must be enforced by additional programming (e.g., SQL)</span></a></h3>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Some business rules might not be easily
enforced by the standard database constraints and may require additional
programming, typically in SQL or a similar database language.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>This could include complex validation
rules, calculations, or workflows.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol;color:black'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: A rule that no more than 10%
of a customer's orders can be on credit might be enforced by a custom SQL
script that calculates the proportion of credit orders whenever a new order is
created or an existing order is modified.</span></p>

<h2><a name="_Toc140584183"></a><a name="_Toc140584362">12: Defining Supertype
and Subtype Entity Relationships</a></h2>

<p class=MsoNormal>Supertype and subtype entities are a way to model
relationships between entities that share certain characteristics.</p>

<h3><a name="_Toc140584184"><span style='color:black'>12.1: Describe an example
of an entity</span></a></h3>

<p class=MsoNormal>An entity is an object or concept about which data is
stored.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Entities are usually represented as
tables in a relational database.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In a university database,
&quot;Student&quot;, &quot;Course&quot;, &quot;Instructor&quot;,
&quot;Department&quot; are examples of entities.</span></p>

<h3><a name="_Toc140584185"><span style='color:black'>12.2: Define supertype
and subtype entities</span></a></h3>

<p class=MsoNormal>Supertype and subtype entities represent a hierarchical
relationship between entities, where subtype entities inherit characteristics
from the supertype entity.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A supertype entity has a broad scope,
and its subtype entities represent more specific instances of the supertype.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Subtypes inherit attributes and
relationships from the supertype.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In a university database,
&quot;Person&quot; could be a supertype entity with attributes like Name,
Address, and Phone Number. &quot;Student&quot; and &quot;Instructor&quot; could
be subtype entities of &quot;Person&quot;, each with additional attributes
relevant to students or instructors.</span></p>

<h3><a name="_Toc140584186"><span style='color:black'>12.3: Implement rules for
supertype and subtype entities</span></a></h3>

<p class=MsoNormal>Rules for supertype and subtype entities determine how these
entities interact.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>These rules often involve ensuring the
integrity of the relationship, such as making sure subtype entities maintain
their relationship with the supertype entity.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: A rule might state that every
&quot;Student&quot; or &quot;Instructor&quot; entity must also exist in the
&quot;Person&quot; entity, reflecting the inheritance from the supertype.</span></p>

<h2><a name="_Toc140584187"></a><a name="_Toc140584363">13: Using Attributes</a></h2>

<p class=MsoNormal>Attributes define the characteristics or properties of an
entity.</p>

<h3><a name="_Toc140584188"><span style='color:black'>13.1: Describe attributes
for a given entity</span></a></h3>

<p class=MsoNormal>Attributes are specific pieces of information that we store
for each entity.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They're typically represented as
columns in a table in a relational database.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: For the &quot;Student&quot;
entity, attributes might include &quot;StudentID&quot;, &quot;Name&quot;,
&quot;Major&quot;, and &quot;GPA&quot;.</span></p>

<h3><a name="_Toc140584189"><span style='color:black'>13.2: Identify and
provide examples of instances</span></a></h3>

<p class=MsoNormal>Instances are specific occurrences of an entity or an
attribute.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>For an entity, an instance corresponds
to a row in a table.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>For an attribute, an instance is a
specific value for that attribute.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: An instance of the
&quot;Student&quot; entity might be the row for a particular student. An
instance of the &quot;Major&quot; attribute might be the value &quot;Computer
Science&quot;.</span></p>

<h3><a name="_Toc140584190">13.3: Distinguish between mandatory and optional
attributes</a></h3>

<p class=MsoNormal>Attributes can be mandatory (required) or optional.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>A mandatory attribute must have a value
for every instance of the entity.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>An optional attribute may not have a
value for every instance.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In the &quot;Student&quot;
entity, &quot;StudentID&quot; and &quot;Name&quot; might be mandatory
attributes, while &quot;Major&quot; might be an optional attribute.</span></p>

<h2><a name="_Toc140584191"></a><a name="_Toc140584364">13.4: Distinguish
between volatile and nonvolatile attributes</a></h2>

<p class=MsoNormal>Attributes can be volatile or nonvolatile, depending on how
frequently their values change.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Volatile attributes have values that
can change frequently.</span></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Nonvolatile attributes have values that
remain constant or change very infrequently.</span></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Example: In the &quot;Student&quot;
entity, &quot;Major&quot; might be a volatile attribute (if students change
majors frequently), while &quot;StudentID&quot; would be a nonvolatile
attribute.</span></p>

<h2><a name="_Toc140584192"></a><a name="_Toc140584365">14: Using Unique
Identifiers (UIDs)</a></h2>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>Unique
Identifiers (UIDs) are vital in databases as they uniquely distinguish each
instance of an entity.</span></p>

<h3><a name="_Toc140584193">14.1: Define the types of unique identifiers</a></h3>

<p class=MsoNormal>There are typically two types of unique identifiers: natural
and artificial.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A natural identifier is an attribute that naturally and uniquely
identifies an entity. It has meaning in the real world outside of the database.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An artificial identifier (also known as a surrogate key) is a
unique identifier that has no meaning outside of the database.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: In a &quot;Student&quot; entity, &quot;StudentID&quot;
could be an artificial identifier, while &quot;Social Security Number&quot;
could be a natural identifier.</p>

<h3><a name="_Toc140584194">14.2: Select a unique identifier using business
rules</a></h3>

<p class=MsoNormal>Business rules, such as the need for privacy, can determine
which attribute should be used as the unique identifier.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Business rules can guide whether a natural or artificial
identifier should be used.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: Due to privacy concerns, the &quot;StudentID&quot; might
be chosen as the unique identifier for the &quot;Student&quot; entity, rather
than the &quot;Social Security Number&quot;.</p>

<h3><a name="_Toc140584195">14.3: Define a candidate unique identifier</a></h3>

<p class=MsoNormal>A candidate unique identifier is an attribute or set of
attributes that could serve as the unique identifier for an entity.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It's a potential choice for the unique identifier.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: In the &quot;Student&quot; entity,
&quot;StudentID&quot;, &quot;Social Security Number&quot;, and
&quot;Email&quot; might all be candidate unique identifiers.</p>

<h3><a name="_Toc140584196">14.4: Define an artificial unique identifier</a></h3>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>An
artificial unique identifier (also known as a surrogate key) is a unique
identifier that has no inherent or natural meaning, but is created solely to
provide a unique identity for each record.</span></p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>These are typically system-generated, such as an incrementing
integer or a GUID.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: The &quot;StudentID&quot; in a &quot;Student&quot;
entity might be an artificial unique identifier that is an automatically
incrementing number assigned when a new student record is created.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584197"></a><a
name="_Toc140584366"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>15: Identifying Relationships</span></a></h2>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>Relationships
in databases describe how entities are connected to each other.</span></p>

<h3><a name="_Toc140584198">15.1: Explain one-to-one, one-to-many, and
many-to-many relationships</a></h3>

<p class=MsoNormal>One-to-one, one-to-many, and many-to-many relationships are
the basic types of relationships between entities.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>One-to-one (1:1): Each instance of Entity A is related to
     one and only one instance of Entity B, and vice versa. For example, a
     &quot;Person&quot; is related to one and only one &quot;Social Security
     Number&quot;.</li>
 <li class=MsoNormal>One-to-many (1:M): Each instance of Entity A can be
     related to many instances of Entity B, but each instance of Entity B is
     related to one and only one instance of Entity A. For example, a
     &quot;Teacher&quot; can teach many &quot;Courses&quot;, but each
     &quot;Course&quot; is taught by one &quot;Teacher&quot;.</li>
 <li class=MsoNormal>Many-to-many (M:N): Each instance of Entity A can be
     related to many instances of Entity B, and each instance of Entity B can
     be related to many instances of Entity A. For example, a
     &quot;Student&quot; can enroll in many &quot;Courses&quot;, and each
     &quot;Course&quot; can have many &quot;Students&quot;.</li>
</ul>

<h3><a name="_Toc140584199">15.2: Identify the optionality necessary for a
relationship</a></h3>

<p class=MsoNormal>The optionality of a relationship determines whether an
instance of an entity must participate in the relationship.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Mandatory relationships require every instance of an
     entity to be related to an instance of another entity.</li>
 <li class=MsoNormal>Optional relationships allow instances of an entity to
     exist without a corresponding relationship.</li>
 <li class=MsoNormal>For example, in a relationship between
     &quot;Students&quot; and &quot;Courses&quot;, the relationship might be
     optional for &quot;Students&quot; (not all students are enrolled in a
     course) but mandatory for &quot;Courses&quot; (all courses must have
     students).</li>
</ul>

<h3><a name="_Toc140584200">15.3: Identify the cardinality necessary for a
relationship</a></h3>

<p class=MsoNormal>Cardinality defines the numerical aspects of the
relationship between two entities.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>It defines the minimum and maximum number of instances of
     one entity that can relate to each instance of another entity.</li>
 <li class=MsoNormal>For example, in a &quot;Teacher&quot;-&quot;Course&quot;
     relationship, the cardinality might be &quot;one to many&quot;.</li>
</ul>

<h3><a name="_Toc140584201">15.4: Identify nontransferable relationships</a></h3>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>Nontransferable
relationships are relationships where the child entity cannot exist without the
parent entity, and the relationship to the parent entity cannot be transferred
to another parent entity.</span></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>For example, an &quot;Order Item&quot; cannot exist
     without an &quot;Order&quot;, and it cannot be transferred to a different
     &quot;Order&quot;.</li>
</ul>

<h3><a name="_Toc140584202">15.5: Name a relationship</a></h3>

<p class=MsoNormal>Naming relationships is an important part of making the
database design clear and understandable.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Relationship names should clearly indicate the nature of
     the relationship.</li>
 <li class=MsoNormal>For example, a relationship between &quot;Teachers&quot;
     and &quot;Courses&quot; might be named &quot;teaches&quot;.</li>
</ul>

<h3><a name="_Toc140584203">15.6: Create ERDish sentences to represent ERDs</a></h3>

<p class=MsoNormal>ERDish sentences are sentences that describe the entities
and relationships in an ERD (Entity-Relationship Diagram).</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>These sentences typically follow a pattern like
     &quot;[Entity A] [relationship verb] [cardinality] [Entity B]&quot;.</li>
 <li class=MsoNormal>For example, an ERDish sentence might be &quot;A 'Teacher'
     teaches one to many 'Courses'&quot;.</li>
</ul>

<h3><a name="_Toc140584204">15.7: Create ERDs to represent ERDish sentences</a></h3>

<p class=MsoNormal>Creating an ERD from an ERDish sentence involves
representing the entities, relationships, cardinalities, and optionality
described in the sentence.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>For example, from the ERDish sentence &quot;A 'Teacher'
     teaches one to many 'Courses'&quot;, you would create an ERD with a
     &quot;Teacher&quot; entity, a &quot;Course&quot; entity, and a one-to-many
     relationship named &quot;teaches&quot; from &quot;Teacher&quot; to
     &quot;Course&quot;.</li>
</ul>

<h3><a name="_Toc140584205">16: Resolving Many to Many Relationships and
Composite Unique Identifiers</a></h3>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>The
resolution of many-to-many relationships and the use of composite unique
identifiers are crucial in data modeling.</span></p>

<h3><a name="_Toc140584206">16.1: Resolve a many-to-many relationship using an
intersection entity</a></h3>

<p class=MsoNormal>Many-to-many (M:N) relationships are typically resolved
using an intersection entity (also known as a join table, bridge entity, or
associative entity).</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This intersection entity is related to the original entities via
one-to-many relationships.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: In a M:N relationship between &quot;Students&quot; and
&quot;Courses&quot;, an intersection entity called &quot;Enrollment&quot; could
be created. Each &quot;Enrollment&quot; record relates one &quot;Student&quot;
to one &quot;Course&quot;.</p>

<h3><a name="_Toc140584207">16.2: Identify the variations of unique identifiers
after creation of an intersection entity</a></h3>

<p class=MsoNormal>After creating an intersection entity, unique identifiers of
the original entities typically become composite unique identifiers in the
intersection entity.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The intersection entity often contains foreign keys to the
original entities.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>These foreign keys, together, can form a composite unique
identifier for the intersection entity.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: In the &quot;Enrollment&quot; intersection entity, the
combination of &quot;StudentID&quot; and &quot;CourseID&quot; could form a
composite unique identifier.</p>

<h3><a name="_Toc140584208">16.3: Define a barred relationship</a></h3>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>A
barred relationship is a relationship between an intersection entity and the
entities from which it was created, represented by bars on the relationship
lines.</span></p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The unique identifier (UID) of the intersection entity often
comes from the originating relationships and is represented by the bars.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In this case, the relationships from the originating entities to
the intersection entity are called &quot;barred&quot; relationships.</p>

<h3><a name="_Toc140584209">16.4: Identify composite unique identifiers</a></h3>

<p class=MsoNormal>A composite unique identifier is a unique identifier that
consists of two or more attributes.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Composite unique identifiers are typically used when no single
attribute is unique on its own, but the combination of two or more attributes
is unique.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-size:10.0pt;line-height:125%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: In an &quot;Enrollment&quot; entity,
&quot;StudentID&quot; and &quot;CourseID&quot; could together form a composite
unique identifier. No two records would have the same combination of
&quot;StudentID&quot; and &quot;CourseID&quot;.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584210"></a><a
name="_Toc140584367"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>17: Identifying Hierarchical,
Recursive, and Arc Relationships</span></a></h2>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>Understanding
the difference between hierarchical, recursive, and arc relationships is
crucial for designing effective database structures.</span></p>

<h3><a name="_Toc140584211">17.1: Define a hierarchical relationship</a></h3>

<p class=MsoNormal style='margin-bottom:12.0pt;line-height:130%'><span
style='font-size:12.0pt;line-height:130%;font-family:"Avenir Next LT Pro",sans-serif'>A
hierarchical relationship is one in which entities are related to each other in
a parent-child structure, with each child entity having only one parent entity.</span></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Example: In an organization, a &quot;Department&quot;
     entity may have many &quot;Employees&quot;, but each &quot;Employee&quot;
     is associated with one &quot;Department&quot;.</li>
</ul>

<h3><a name="_Toc140584212">17.2: Define a recursive relationship</a></h3>

<p class=MsoNormal>A recursive relationship is a relationship in which an
entity is related to itself.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>It is used when an instance of an entity has a
     relationship with another instance of the same entity.</li>
 <li class=MsoNormal>Example: In an &quot;Employee&quot; entity, a
     &quot;Manager&quot; attribute might reference another &quot;Employee&quot;
     record.</li>
</ul>

<h3>&nbsp;</h3>

<h3><a name="_Toc140584213">17.3: Define an arc relationship</a></h3>

<p class=MsoNormal style='line-height:107%'>An arc relationship is a unique
kind of relationship structure in an Entity-Relationship Diagram (ERD) in which
an entity (known as the 'arc entity') is involved in relationships with two or
more other entities (known as 'target entities'), but only one of those
relationships can exist for each instance of the arc entity.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black'>To understand this, consider an
     example: a &quot;Payment&quot; entity could have relationships to both a
     &quot;Credit Card&quot; entity and a &quot;Bank Account&quot; entity, but
     a given payment can only be made with either a credit card or a bank
     account, not both. This implies that for any one instance of
     &quot;Payment&quot;, the relationship will only be active with either
     &quot;Credit Card&quot; or &quot;Bank Account&quot; and not with both at
     the same time. This forms an arc relationship between &quot;Payment&quot;,
     &quot;Credit Card&quot;, and &quot;Bank Account&quot;.</li>
</ul>

<h3><a name="_Toc140584214">17.4: Identify UIDs in a hierarchical, recursive,
and arc relationship model</a></h3>

<p class=MsoNormal style='line-height:107%'>Unique Identifiers (UIDs) in
different types of relationship models play different roles based on the nature
of the relationship.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Hierarchical Relationships: In these types of relationships, the
UID often originates from the parent entity and is passed on to the child
entities. Consider an organizational structure where a 'Department' entity is
the parent, and an 'Employee' entity is the child. The UID of the 'Department'
can be passed as a foreign key to the 'Employee' entity to establish a
relationship between them.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Recursive Relationships: In these relationships, an entity is
related to itself. Hence, the UID is often generated within the entity itself.
Consider a 'Person' entity that has a relationship 'is parent of' to another
Person. The UID of the parent-Person could be used as a foreign key in the
child-Person.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Arc Relationships: In these relationships, the UID often comes
from the arc entity itself and is used to identify which of the possible
relationships with target entities is active for a particular instance of the
arc entity. If we go back to the &quot;Payment&quot;, &quot;Credit Card&quot;,
and &quot;Bank Account&quot; example, the 'PaymentID' would be the UID. Each
payment would use this UID to relate to either a specific credit card or a
specific bank account, but not both.</p>

<h3><a name="_Toc140584215">17.5: Construct a model using recursion and
hierarchies</a></h3>

<p class=MsoNormal>Building models with recursion and hierarchies involves
defining the entities, relationships, and unique identifiers appropriately.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Recursive relationships might be represented with a
     foreign key within an entity that references the entity's own primary key.</li>
 <li class=MsoNormal>Hierarchical relationships might be represented with an
     entity for each level of the hierarchy, with relationships defined between
     the entities.</li>
</ul>

<h3><a name="_Toc140584216">17.6: Identify similarities and differences in an
arc relationship and a supertype/subtype entity</a></h3>

<p class=MsoNormal style='line-height:107%'>Arc relationships and
supertype/subtype structures both involve one entity (the 'arc entity' or
'supertype', respectively) that is related to multiple other entities (the
'target entities' or 'subtypes', respectively). However, the nature of these
relationships is different in each case.</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Similarity: In both cases, the 'arc entity' or 'supertype' can
potentially relate to multiple other entities ('target entities' or
'subtypes').</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Differences: Arc Relationships: In an arc relationship, an
instance of the arc entity can only have an active relationship with one of the
target entities at a time. For instance, an instance of a 'Payment' can relate
to either a 'Credit Card' or a 'Bank Account', but not both at the same time.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Differences: Supertype/Subtype: In a supertype/subtype
relationship, an instance of the supertype can simultaneously have active
relationships with multiple subtypes. For example, an 'Employee' could be a
'Manager' and a 'Sales Representative' at the same time. The 'Employee' entity
is the supertype and the 'Manager' and 'Sales Representative' entities are the
subtypes. Here, the employee's 'EmployeeID' (a UID from the supertype entity)
can simultaneously exist in the 'Manager' and 'Sales Representative' entities,
showing that this employee holds both roles.</p>

<p class=MsoNormal>&nbsp;</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584217"></a><a
name="_Toc140584368"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>18: Tracking Data Changes Over
Time</span></a></h2>

<p class=MsoNormal style='line-height:107%'>The ability to track data changes
over time is critical for accurate historical analysis and informed
decision-making.</p>

<h3><a name="_Toc140584218">18.1: Explain the necessity of tracking data
changes over time</a></h3>

<p class=MsoNormal style='line-height:107%'>Understanding and tracking data
changes over time is essential for several reasons:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It allows for historical analysis, showing how data has changed
and trends have evolved.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It enables accurate record-keeping, which is crucial for
compliance and auditing purposes.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It helps in decision-making processes by providing a context for
the current data.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Example: Tracking sales data over time can help a business
understand seasonal trends, track the success of marketing campaigns, and make
informed decisions about future strategies.</p>

<h3><a name="_Toc140584219">18.2: Identify data that changes over time</a></h3>

<p class=MsoNormal style='line-height:107%'>Certain types of data are
particularly prone to changes over time and hence need careful tracking:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Dynamic attributes such as a person's address, a product's price,
or an employee's job title often change over time.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Relationships between entities can change, like a student's
enrollment in different courses, an employee's assignment to different
departments, or a customer's orders over time.</p>

<h3><a name="_Toc140584220">18.3: Identify the changes in unique identifiers
after adding the element of time to an ERD</a></h3>

<p class=MsoNormal style='line-height:107%'>The addition of the element of time
to an ERD may require the adaptation of unique identifiers:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A new attribute, such as a timestamp or date, might be added to
the unique identifier to capture when a record was created or updated.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This would create a composite unique identifier, with the
original identifier and the time element together providing uniqueness.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, in a &quot;Sales&quot; table, a sale might
originally be identified by a &quot;SaleID&quot;. But if we want to track
changes over time, we might add a &quot;Date&quot; attribute to the unique
identifier, so each sale is identified by both the &quot;SaleID&quot; and the
&quot;Date&quot;.</p>

<h1 align=left style='margin-top:24.0pt;text-align:left;line-height:107%'><br>
<a name="_Toc140584221"></a><a name="_Toc140584369"><span style='font-size:
24.0pt;line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>19:
Validating Data Using Normalization</span></a></h1>

<p class=MsoNormal style='line-height:107%'>Normalization is a systematic
approach of decomposing tables to eliminate data redundancy and undesirable
characteristics like Insertion, Update and Deletion Anomalies. It is a
multi-step process that puts data into tabular form by removing duplicated data
from the relational tables.</p>

<h3><a name="_Toc140584222">19.1: Define the purpose of normalization</a></h3>

<p class=MsoNormal style='line-height:107%'>The primary purpose of
normalization is to:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Reduce data redundancy: This means that the same piece of data
will not be stored in more than one place. This not only saves storage space
but also makes the database more efficient to update.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Eliminate anomalies: Anomalies are issues that arise in database
operations due to redundancy. Normalization helps eliminate insertion,
deletion, and update anomalies.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Ensure data dependencies make sense: Normalization helps in
having clear relationships among tables which further helps in understanding
the database in a better way.</p>

<h3><a name="_Toc140584223">19.2: Define the rules of First, Second, and Third
Normal Forms</a></h3>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First Normal Form (1NF): A table is in 1NF if it contains no
repeating groups of data. Each row of data must contain atomic (indivisible)
values and each record needs to be unique.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Second Normal Form (2NF): A table is in 2NF if it is in 1NF and
every non-key attribute is fully functionally dependent on the primary key.
This means there is no partial dependency of any column on the primary key.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Third Normal Form (3NF): A table is in 3NF if it is in 2NF and
there is no transitive dependency for non-key attributes. This means a non-key
column should not depend on another non-key column.</p>

<h3><a name="_Toc140584224">19.3: Apply the rules of First, Second, and Third
Normal Form</a></h3>

<p class=MsoNormal style='line-height:107%'>Applying these rules involves:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For 1NF, remove any repeating groups of data by creating separate
tables for each group and connect them via relationships.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For 2NF, ensure that each non-key column is dependent on the
primary key. If a column is dependent only on a part of a composite primary
key, move it to a separate table.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For 3NF, remove columns that are not dependent on the primary key
but are dependent on other non-key columns. These should be placed in a
separate table.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An example: If we have a table &quot;Orders&quot; with columns
&quot;OrderID&quot;, &quot;CustomerID&quot;, &quot;CustomerName&quot;,
&quot;ProductID&quot;, &quot;ProductName&quot;, we can apply normalization:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>1NF: The table is already in 1NF as each column contains atomic
values and each record is unique.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>2NF: &quot;CustomerName&quot; is dependent on
&quot;CustomerID&quot;, not on &quot;OrderID&quot; (primary key). So, we create
a separate &quot;Customers&quot; table with &quot;CustomerID&quot; and
&quot;CustomerName&quot;.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>3NF: &quot;ProductName&quot; is dependent on
&quot;ProductID&quot;, not on &quot;OrderID&quot; (primary key). So, we create
a separate &quot;Products&quot; table with &quot;ProductID&quot; and
&quot;ProductName&quot;.</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>In the end, we have three tables &quot;Orders&quot;,
&quot;Customers&quot;, and &quot;Products&quot; which are all in 3NF.</p>

<h1 align=left style='margin-top:24.0pt;text-align:left;line-height:107%'><a
name="_Toc140584225"></a><a name="_Toc140584370"><span style='font-size:24.0pt;
line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>Mapping
the Physical Model</span></a></h1>

<p class=MsoNormal>&nbsp;</p>

<h3 style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;margin-left:
0in;line-height:107%'><a name="_Toc140584226"><span style='font-size:17.0pt;
line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>20.1:
Map entities to identify database tables to be created from an ERD</span></a></h3>

<p class=MsoNormal style='line-height:107%'>Mapping entities to tables is a key
task in designing a database:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each entity in the ERD becomes a table in the database.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Attributes of each entity become columns in the respective table.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, an entity &quot;Student&quot; with attributes
&quot;StudentID&quot;, &quot;Name&quot;, &quot;Email&quot; will be transformed
into a table &quot;Student&quot; with columns &quot;StudentID&quot;,
&quot;Name&quot;, and &quot;Email&quot;.</p>

<h3><a name="_Toc140584227">20.2: Identify column data types from an ERD</a></h3>

<p class=MsoNormal style='line-height:107%'>Each attribute in an ERD will have
an associated data type when it is transformed into a column in a table:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The data type of a column determines what kind of data it can
store.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, the &quot;StudentID&quot; might be of type integer,
&quot;Name&quot; of type varchar, and &quot;Email&quot; of type varchar.</p>

<h3><a name="_Toc140584228">20.3: Identify common data types used to store
values in a relational database</a></h3>

<p class=MsoNormal style='line-height:107%'>There are several common data types
used in relational databases:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Numeric: Integer, decimal, float, etc. For example, the
&quot;Age&quot; attribute of a &quot;Person&quot; entity could be stored as an
integer.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>String: Char, varchar, text, etc. For example, the
&quot;Name&quot; attribute of a &quot;Person&quot; entity could be stored as a
varchar.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Date and Time: Date, time, timestamp, etc. For example, the
&quot;DateOfBirth&quot; attribute of a &quot;Person&quot; entity could be
stored as a date.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Binary: Blob, binary, etc. For example, the &quot;Photo&quot;
attribute of a &quot;Person&quot; entity could be stored as a blob.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boolean: Boolean data type for true/false values. For example,
the &quot;IsEmployed&quot; attribute of a &quot;Person&quot; entity could be
stored as a boolean.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584229"></a><a
name="_Toc140584371"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>21: Mapping Primary, Composite
Primary, and Foreign Keys</span></a></h2>

<p class=MsoNormal style='line-height:107%'>Primary keys, composite primary
keys, and foreign keys are essential in ensuring data integrity and
establishing relationships among tables in a relational database.</p>

<h3><a name="_Toc140584230">21.1: Identify primary keys from an ERD</a></h3>

<p class=MsoNormal style='line-height:107%'>A primary key is an attribute or
combination of attributes that uniquely identifies a record in a table:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black'>In an ERD, primary keys are often
     highlighted or denoted with a special symbol.</li>
 <li class=MsoNormal style='color:black'>For example, if we have an entity
     &quot;Student&quot; with attributes &quot;StudentID&quot;,
     &quot;Name&quot;, &quot;Email&quot;, the &quot;StudentID&quot; would
     typically be the primary key as it uniquely identifies each student.</li>
</ul>

<h3><a name="_Toc140584231">21.2: Identify which ERD attributes would make
candidate primary keys</a></h3>

<p class=MsoNormal style='line-height:107%'>A candidate primary key is any
attribute or set of attributes that could serve as the primary key:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black'>In identifying candidate primary keys,
     one should consider attributes that are unique, non-null, and stable
     (unlikely to change).</li>
 <li class=MsoNormal style='color:black'>For example, both
     &quot;StudentID&quot; and &quot;Email&quot; could be candidate primary
     keys in a &quot;Student&quot; entity, as they are likely to be unique and
     non-null.</li>
</ul>

<h3><a name="_Toc140584232">21.3: Describe the purpose of a foreign key in an
Oracle Database</a></h3>

<p class=MsoNormal style='line-height:107%'>A foreign key is a column or group
of columns in a table that is used to establish a link between the data in two
tables:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a field in a table that matches the primary key of another
table.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The purpose of a foreign key is to ensure referential integrity
of the data, i.e., the data in the two tables remains consistent.</p>

<h3><a name="_Toc140584233">21.4: Identify foreign keys from an ERD</a></h3>

<p class=MsoNormal>Foreign keys can be identified in an ERD by looking at the
relationships between entities:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a relationship exists between two entities, the primary key of
the &quot;parent&quot; entity will appear as a foreign key in the
&quot;child&quot; entity.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, in a &quot;Course Registration&quot; entity that
relates &quot;Student&quot; and &quot;Course&quot; entities, the
&quot;StudentID&quot; and &quot;CourseID&quot; would be foreign keys.</p>

<h3><a name="_Toc140584234">21.5: Describe the relationship between primary
keys, composite primary keys, and foreign keys in an Oracle Database</a></h3>

<p class=MsoNormal style='line-height:107%'>Primary keys, composite primary
keys, and foreign keys all play roles in ensuring data integrity and creating
relationships in a database:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A primary key uniquely identifies a record in a table.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A composite primary key uses multiple columns to achieve
uniqueness if no single column is unique.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A foreign key matches the primary key in another table, creating
a relationship between the two tables.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In the case of a composite primary key, the entire composite key
needs to be included as a foreign key in the related table to maintain the
relationship. For example, if a &quot;Course Registration&quot; table has a
composite primary key of &quot;StudentID&quot; and &quot;CourseID&quot;, both
these columns would appear as foreign keys in any table that needs to reference
a specific course registration.</p>

<h1 align=left style='margin-top:24.0pt;text-align:left;line-height:107%'><a
name="_Toc140584235"></a><a name="_Toc140584372"><span style='font-size:24.0pt;
line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>Introduction
to SQL</span></a></h1>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584236"></a><a
name="_Toc140584373"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>22: Using Structured Query
Language (SQL)</span></a></h2>

<p class=MsoNormal style='line-height:107%'>Structured Query Language (SQL) is
the standard language for managing and manipulating relational databases.</p>

<h3><a name="_Toc140584237">22.1: Explain the relationship between a database
and SQL</a></h3>

<p class=MsoNormal style='line-height:107%'>SQL is the language used to
interact with databases:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>SQL allows us to create, read, update, and delete records in a
database.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is also used to manage and control access to the database.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, in an Oracle database, you might use SQL to retrieve
a list of customers from a &quot;Customers&quot; table with the query <b>SELECT
* FROM Customers</b>.</p>

<h3><a name="_Toc140584238">23: Using Data Definition Language (DDL)</a></h3>

<p class=MsoNormal style='line-height:107%'>DDL is a subset of SQL used to
define and manage structures in a database.</p>

<h3><a name="_Toc140584239">23.1: Describe the purpose of DDL</a></h3>

<p class=MsoNormal style='line-height:107%'>The purpose of DDL is to define and
manage database objects:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>DDL includes commands like CREATE, ALTER, DROP, TRUNCATE, and
RENAME.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, you might use the DDL command <b>CREATE TABLE
Customers (CustomerID INT, Name VARCHAR(100));</b> to create a new table in an
Oracle database.</p>

<h3><a name="_Toc140584240">23.2: Use DDL to manage tables and their
relationships</a></h3>

<p class=MsoNormal style='line-height:107%'>DDL commands are used to create and
modify the structure of database tables and their relationships:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This can include creating tables (<b>CREATE TABLE</b>), modifying
existing tables (<b>ALTER TABLE</b>), deleting tables (<b>DROP TABLE</b>), and
renaming tables (<b>RENAME</b>).</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In managing relationships, DDL is used to define primary keys (<b>PRIMARY
KEY</b>), foreign keys (<b>FOREIGN KEY</b>), and constraints to enforce data
integrity.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, to add a foreign key to a &quot;Orders&quot; table
that references the &quot;Customers&quot; table, you might use the DDL command <b>ALTER
TABLE Orders ADD CONSTRAINT fk_CustomerID FOREIGN KEY (CustomerID) REFERENCES
Customers(CustomerID);</b>.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><a name="_Toc140584241"></a><a
name="_Toc140584374"><span style='font-size:17.0pt;line-height:107%;font-family:
"Avenir Next LT Pro",sans-serif;color:#5066DB'>24: Using Data Manipulation
Language (DML) and Transaction Control Language (TCL)</span></a></h2>

<p class=MsoNormal style='line-height:107%'>Data Manipulation Language (DML)
and Transaction Control Language (TCL) are two sublanguages of SQL, with DML
focused on managing data and TCL on managing transactions.</p>

<h3><a name="_Toc140584242">24.1: Describe the purpose of DML</a></h3>

<p class=MsoNormal style='line-height:107%'>The purpose of DML is to retrieve,
insert, modify, and delete data in a database:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>DML includes commands like SELECT, INSERT, UPDATE, and DELETE.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, you might use the DML command <b>INSERT INTO
Customers (CustomerID, Name) VALUES (1, 'John Doe');</b> to add a new customer
record to a &quot;Customers&quot; table in an Oracle database.</p>

<h3><a name="_Toc140584243">24.2: Use DML to manage data in tables</a></h3>

<p class=MsoNormal style='line-height:107%'>DML commands are used to manage the
data within database tables:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This includes retrieving data (<b>SELECT</b>), inserting new data
(<b>INSERT</b>), modifying existing data (<b>UPDATE</b>), and deleting data (<b>DELETE</b>).</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, to modify the name of a customer in the
&quot;Customers&quot; table, you might use the DML command <b>UPDATE Customers
SET Name = 'Jane Doe' WHERE CustomerID = 1;</b>.</p>

<h3><a name="_Toc140584244">24.3: Use TCL to manage transactions</a></h3>

<p class=MsoNormal style='line-height:107%'>TCL commands are used to manage the
changes made by DML statements:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>TCL includes commands like COMMIT, ROLLBACK, and SAVEPOINT.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The COMMIT command is used to save the changes made in a
transaction.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The ROLLBACK command is used to undo the changes made in a
transaction.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The SAVEPOINT command is used to set a point in a transaction to
which you can later rollback if needed.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, if you've made several changes to a database in a
single transaction, but then decide you want to undo those changes, you might
use the TCL command <b>ROLLBACK;</b> to revert the database back to its state
before the transaction began.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><br>
<a name="_Toc140584245"></a><a name="_Toc140584375"><span style='font-size:
17.0pt;line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>25:
Defining and Using Basic Select Statements</span></a></h2>

<p class=MsoNormal style='line-height:107%'>Select statements form the core of
data retrieval in SQL and play a crucial role in interacting with databases.</p>

<h3><a name="_Toc140584246">25.1: Identify the connection between an ERD and a
Relational Database using SQL SELECT statements</a></h3>

<p class=MsoNormal style='line-height:107%'>The ERD (Entity Relationship
Diagram) provides a visual representation of the database structure, and SQL
SELECT statements query the data within that structure:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each entity in the ERD corresponds to a table in the database,
and each attribute corresponds to a column in the table.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A SELECT statement allows you to retrieve data from one or more
of these tables.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, a SELECT statement like <b>SELECT * FROM Customers;</b>
corresponds to retrieving all data from the &quot;Customers&quot; entity in the
ERD.</p>

<h3><a name="_Toc140584247">25.2: Build a SELECT statement to retrieve data
from an Oracle Database table</a></h3>

<p class=MsoNormal style='line-height:107%'>A basic SELECT statement allows you
to retrieve specific data from a table:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The simplest form of a SELECT statement is <b>SELECT column_name
FROM table_name;</b>.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>You can also use <b>SELECT * FROM table_name;</b> to select all
columns from a table.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, to retrieve the &quot;Name&quot; and
&quot;Email&quot; columns from a &quot;Customers&quot; table, you might use <b>SELECT
Name, Email FROM Customers;</b>.</p>

<h3><a name="_Toc140584248">25.3: Use the WHERE clause to the SELECT statement
to filter query results</a></h3>

<p class=MsoNormal style='line-height:107%'>The WHERE clause allows you to
filter the results of a SELECT statement based on one or more conditions:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The WHERE clause follows the format SELECT column_name FROM
table_name WHERE condition;.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, to retrieve customers from a &quot;Customers&quot;
table who live in &quot;New York&quot;, you might use SELECT * FROM Customers
WHERE City = 'New York';.</p>

<h3><a name="_Toc140584249">25.4: Use the ORDER BY clause to sort SQL query
results</a></h3>

<p class=MsoNormal style='line-height:107%'>The ORDER BY clause allows you to
sort the results of a SELECT statement:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The ORDER BY clause follows the format SELECT column_name FROM
table_name ORDER BY column_name [ASC|DESC];.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For example, to retrieve customers from a &quot;Customers&quot;
table sorted by &quot;Name&quot; in ascending order, you might use SELECT *
FROM Customers ORDER BY Name ASC;.</p>

<h2 align=left style='margin-top:12.0pt;margin-right:0in;margin-bottom:4.0pt;
margin-left:0in;text-align:left;line-height:107%'><br>
<a name="_Toc140584250"></a><a name="_Toc140584376"><span style='font-size:
17.0pt;line-height:107%;font-family:"Avenir Next LT Pro",sans-serif;color:#5066DB'>26:
Defining Table Joins</span></a></h2>

<p class=MsoNormal style='line-height:107%'>Joins in SQL allow you to combine
rows from two or more tables based on a related column between them.</p>

<h3><a name="_Toc140584251">26.1: Describe the different types of joins and
their features</a></h3>

<p class=MsoNormal style='line-height:107%'>There are four main types of joins
in SQL: INNER JOIN, LEFT JOIN (or LEFT OUTER JOIN), RIGHT JOIN (or RIGHT OUTER
JOIN), and FULL JOIN (or FULL OUTER JOIN):</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>INNER JOIN</b>: This returns records that have matching values
in both tables.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>LEFT JOIN</b>: This returns all records from the left table,
and the matched records from the right table. If no match is found, the result
is NULL on the right side.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>RIGHT JOIN</b>: This returns all records from the right table,
and the matched records from the left table. If no match is found, the result
is NULL on the left side.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>FULL JOIN</b>: This returns all records when there is a match
in either the left or the right table.</p>

<h3><a name="_Toc140584252">26.2: Use joins to retrieve data from multiple
tables</a></h3>

<p class=MsoNormal style='line-height:107%'>Joins are used in a SELECT
statement to retrieve data from multiple related tables:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal style='color:black'>For example, to retrieve a list of
     customers and their respective orders from a &quot;Customers&quot; table
     and an &quot;Orders&quot; table, you might use an INNER JOIN like so: <b>SELECT
     Customers.Name, Orders.OrderID FROM Customers INNER JOIN Orders ON
     Customers.CustomerID = Orders.CustomerID;</b>.</li>
 <li class=MsoNormal style='color:black'>This would return a list of customers
     and their respective orders based on matching CustomerID values in both
     tables.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
