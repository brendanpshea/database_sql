[
    {
        "question": "Create a table named \"experiments\" for Dexter's Laboratory with columns 'experiment_id' (integer primary key) and 'name' (text).",
        "answer": "CREATE TABLE experiments (experiment_id INTEGER PRIMARY KEY, name TEXT);",
        "setup": "DROP TABLE IF EXISTS experiments;"
    },
    {
        "question": "Create a table \"krabby_patties\" with columns 'id' (integer primary key) and 'recipe_name' (text that cannot be null).",
        "answer": "CREATE TABLE krabby_patties (id INTEGER PRIMARY KEY, recipe_name TEXT NOT NULL);",
        "setup": "DROP TABLE IF EXISTS krabby_patties;"
    },
    {
        "question": "Create a table \"portal_guns\" with 'id' (integer primary key), 'dimension' (text), and 'power_level' (integer with default value 100).",
        "answer": "CREATE TABLE portal_guns (id INTEGER PRIMARY KEY, dimension TEXT, power_level INTEGER DEFAULT 100);",
        "setup": "DROP TABLE IF EXISTS portal_guns;"
    },
    {
        "question": "Insert a new experiment named 'Cheese Ray' with id 1 into Dexter's experiments table.",
        "answer": "INSERT INTO experiments (experiment_id, name) VALUES (1, 'Cheese Ray');",
        "setup": "DROP TABLE IF EXISTS experiments; CREATE TABLE experiments (experiment_id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Create a table \"employees\" for Springfield Nuclear Power Plant with 'id' (integer primary key), 'name' (text), and 'department' (text with default value 'Safety').",
        "answer": "CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT, department TEXT DEFAULT 'Safety');",
        "setup": "DROP TABLE IF EXISTS employees;"
    },
    {
        "question": "Create a table \"ingredients\" for Bob's Burgers with 'id' (integer primary key), 'name' (text not null), and 'in_stock' (boolean with default true).",
        "answer": "CREATE TABLE ingredients (id INTEGER PRIMARY KEY, name TEXT NOT NULL, in_stock BOOLEAN DEFAULT true);",
        "setup": "DROP TABLE IF EXISTS ingredients;"
    },
    {
        "question": "Insert three portal guns with IDs 1-3 and dimensions 'C-137', 'D-99', and 'Z-23' respectively.",
        "answer": "INSERT INTO portal_guns (id, dimension) VALUES (1, 'C-137'), (2, 'D-99'), (3, 'Z-23');",
        "setup": "DROP TABLE IF EXISTS portal_guns; CREATE TABLE portal_guns (id INTEGER PRIMARY KEY, dimension TEXT, power_level INTEGER DEFAULT 100);"
    },
    {
        "question": "Create a table \"certifications\" for nuclear plant employees with 'cert_id' (integer primary key), 'emp_id' (integer foreign key referencing employees.id), and 'cert_name' (text).",
        "answer": "CREATE TABLE certifications (cert_id INTEGER PRIMARY KEY, emp_id INTEGER, cert_name TEXT, FOREIGN KEY (emp_id) REFERENCES employees(id));",
        "setup": "DROP TABLE IF EXISTS certifications; DROP TABLE IF EXISTS employees; CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Create a table \"acme_products\" with 'id' (integer primary key), 'name' (text), 'price' (decimal), and 'danger_level' (integer between 1 and 10).",
        "answer": "CREATE TABLE acme_products (id INTEGER PRIMARY KEY, name TEXT, price DECIMAL, danger_level INTEGER CHECK (danger_level BETWEEN 1 AND 10));",
        "setup": "DROP TABLE IF EXISTS acme_products;"
    },
    {
        "question": "Create a table \"gold_vault\" for Scrooge McDuck with 'id' (integer primary key), 'gold_amount' (decimal positive number), and 'location' (text not null unique).",
        "answer": "CREATE TABLE gold_vault (id INTEGER PRIMARY KEY, gold_amount DECIMAL CHECK (gold_amount > 0), location TEXT NOT NULL UNIQUE);",
        "setup": "DROP TABLE IF EXISTS gold_vault;"
    },
    {
        "question": "Insert two new employees 'Homer Simpson' and 'Lenny Leonard' into the employees table with IDs 1 and 2.",
        "answer": "INSERT INTO employees (id, name) VALUES (1, 'Homer Simpson'), (2, 'Lenny Leonard');",
        "setup": "DROP TABLE IF EXISTS employees; CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT, department TEXT DEFAULT 'Safety');"
    },
    {
        "question": "Create a table \"burger_orders\" with 'order_id' (integer primary key), 'burger_name' (text), 'price' (decimal positive), and 'order_time' (timestamp with default current timestamp).",
        "answer": "CREATE TABLE burger_orders (order_id INTEGER PRIMARY KEY, burger_name TEXT, price DECIMAL CHECK (price > 0), order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
        "setup": "DROP TABLE IF EXISTS burger_orders;"
    },
    {
        "question": "Create a table \"dimension_travelers\" with 'id' (integer primary key), 'name' (text), 'home_dimension' (text), and ensure no duplicate combinations of name and home_dimension.",
        "answer": "CREATE TABLE dimension_travelers (id INTEGER PRIMARY KEY, name TEXT, home_dimension TEXT, UNIQUE (name, home_dimension));",
        "setup": "DROP TABLE IF EXISTS dimension_travelers;"
    },
    {
        "question": "Create a table \"test_results\" for Dexter with 'id' (integer primary key), 'experiment_id' (foreign key), 'result' (text), and 'success' (boolean with default false).",
        "answer": "CREATE TABLE test_results (id INTEGER PRIMARY KEY, experiment_id INTEGER, result TEXT, success BOOLEAN DEFAULT false, FOREIGN KEY (experiment_id) REFERENCES experiments(id));",
        "setup": "DROP TABLE IF EXISTS test_results; DROP TABLE IF EXISTS experiments; CREATE TABLE experiments (experiment_id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Insert three ingredients for Bob's Burgers: 'Beef' (id=1), 'Lettuce' (id=2), and 'Special Sauce' (id=3, not in stock).",
        "answer": "INSERT INTO ingredients (id, name, in_stock) VALUES (1, 'Beef', true), (2, 'Lettuce', true), (3, 'Special Sauce', false);",
        "setup": "DROP TABLE IF EXISTS ingredients; CREATE TABLE ingredients (id INTEGER PRIMARY KEY, name TEXT NOT NULL, in_stock BOOLEAN DEFAULT true);"
    },
    {
        "question": "Create a table \"world_domination_plans\" with 'plan_id' (integer primary key), 'name' (text), 'probability' (decimal between 0 and 1), and 'created_at' (timestamp).",
        "answer": "CREATE TABLE world_domination_plans (plan_id INTEGER PRIMARY KEY, name TEXT, probability DECIMAL CHECK (probability BETWEEN 0 AND 1), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
        "setup": "DROP TABLE IF EXISTS world_domination_plans;"
    },
    {
        "question": "Create a table \"inventory_transactions\" for the Krusty Krab with 'id' (primary key), 'item_id' (foreign key), 'quantity_change' (integer), and 'transaction_time' (timestamp).",
        "answer": "CREATE TABLE inventory_transactions (id INTEGER PRIMARY KEY, item_id INTEGER, quantity_change INTEGER, transaction_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (item_id) REFERENCES ingredients(id));",
        "setup": "DROP TABLE IF EXISTS inventory_transactions; DROP TABLE IF EXISTS ingredients; CREATE TABLE ingredients (id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Create a table \"nuclear_incidents\" with 'id' (primary key), 'employee_id' (foreign key), 'severity' (integer 1-5), 'description' (text), and 'reported_at' (timestamp).",
        "answer": "CREATE TABLE nuclear_incidents (id INTEGER PRIMARY KEY, employee_id INTEGER, severity INTEGER CHECK (severity BETWEEN 1 AND 5), description TEXT, reported_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (employee_id) REFERENCES employees(id));",
        "setup": "DROP TABLE IF EXISTS nuclear_incidents; DROP TABLE IF EXISTS employees; CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Create a table \"interdimensional_trades\" with 'trade_id' (primary key), 'item_name', 'from_dimension', 'to_dimension', 'value' (positive decimal), and ensure unique combinations of all columns except trade_id.",
        "answer": "CREATE TABLE interdimensional_trades (trade_id INTEGER PRIMARY KEY, item_name TEXT, from_dimension TEXT, to_dimension TEXT, value DECIMAL CHECK (value > 0), UNIQUE (item_name, from_dimension, to_dimension, value));",
        "setup": "DROP TABLE IF EXISTS interdimensional_trades;"
    },
    {
        "question": "Create a table \"acme_order_items\" with 'order_id' and 'product_id' as composite primary key, 'quantity' (positive integer), and 'status' (text with allowed values: 'pending', 'shipped', 'delivered').",
        "answer": "CREATE TABLE acme_order_items (order_id INTEGER, product_id INTEGER, quantity INTEGER CHECK (quantity > 0), status TEXT CHECK (status IN ('pending', 'shipped', 'delivered')), PRIMARY KEY (order_id, product_id));",
        "setup": "DROP TABLE IF EXISTS acme_order_items;"
    },
  [
   {
       "question": "Add a column 'last_modified' of type TIMESTAMP to the 'experiments' table.",
       "answer": "ALTER TABLE experiments ADD COLUMN last_modified TIMESTAMP;",
       "setup": "DROP TABLE IF EXISTS experiments; CREATE TABLE experiments (experiment_id INTEGER PRIMARY KEY, name TEXT);"
   },
   {
       "question": "Add a column 'risk_level' of type INTEGER with a default value of 1 to the 'portal_guns' table.",
       "answer": "ALTER TABLE portal_guns ADD COLUMN risk_level INTEGER DEFAULT 1;",
       "setup": "DROP TABLE IF EXISTS portal_guns; CREATE TABLE portal_guns (id INTEGER PRIMARY KEY, dimension TEXT);"
   },
   {
       "question": "Delete all experiments from Dexter's lab where the name contains 'failed'.",
       "answer": "DELETE FROM experiments WHERE name LIKE '%failed%';",
       "setup": "DROP TABLE IF EXISTS experiments; CREATE TABLE experiments (experiment_id INTEGER PRIMARY KEY, name TEXT); INSERT INTO experiments VALUES (1, 'failed_cheese_ray'), (2, 'success_beam'), (3, 'failed_shrink_ray');"
   },
   {
       "question": "Remove all nuclear incidents with severity level 1 (minor).",
       "answer": "DELETE FROM nuclear_incidents WHERE severity = 1;",
       "setup": "DROP TABLE IF EXISTS nuclear_incidents; CREATE TABLE nuclear_incidents (id INTEGER PRIMARY KEY, severity INTEGER); INSERT INTO nuclear_incidents VALUES (1, 1), (2, 3), (3, 1);"
   },
   {
       "question": "Delete all records from the 'gold_vault' table where the amount is less than 1000.",
       "answer": "DELETE FROM gold_vault WHERE gold_amount < 1000;",
       "setup": "DROP TABLE IF EXISTS gold_vault; CREATE TABLE gold_vault (id INTEGER PRIMARY KEY, gold_amount DECIMAL); INSERT INTO gold_vault VALUES (1, 500), (2, 1500), (3, 750);"
   },
   {
       "question": "Add a 'notes' column of type TEXT to the 'burger_orders' table.",
       "answer": "ALTER TABLE burger_orders ADD COLUMN notes TEXT;",
       "setup": "DROP TABLE IF EXISTS burger_orders; CREATE TABLE burger_orders (order_id INTEGER PRIMARY KEY, burger_name TEXT);"
   },
   {
       "question": "Delete all portal guns from dimension 'C-137'.",
       "answer": "DELETE FROM portal_guns WHERE dimension = 'C-137';",
       "setup": "DROP TABLE IF EXISTS portal_guns; CREATE TABLE portal_guns (id INTEGER PRIMARY KEY, dimension TEXT); INSERT INTO portal_guns VALUES (1, 'C-137'), (2, 'D-99');"
   },
   {
       "question": "Add a 'certified' column of type BOOLEAN with default value FALSE to the 'employees' table.",
       "answer": "ALTER TABLE employees ADD COLUMN certified BOOLEAN DEFAULT FALSE;",
       "setup": "DROP TABLE IF EXISTS employees; CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT);"
   },
   {
       "question": "Remove all ingredients that are not in stock from Bob's Burgers inventory.",
       "answer": "DELETE FROM ingredients WHERE in_stock = FALSE;",
       "setup": "DROP TABLE IF EXISTS ingredients; CREATE TABLE ingredients (id INTEGER PRIMARY KEY, name TEXT, in_stock BOOLEAN); INSERT INTO ingredients VALUES (1, 'Beef', TRUE), (2, 'Special Sauce', FALSE);"
   },
   {
       "question": "Drop the 'world_domination_plans' table if it exists.",
       "answer": "DROP TABLE IF EXISTS world_domination_plans;",
       "setup": "DROP TABLE IF EXISTS world_domination_plans; CREATE TABLE world_domination_plans (plan_id INTEGER PRIMARY KEY, name TEXT);"
   }
]
