[
    
    {"question": "Create a table named \"agents\" that includes an integer column 'agent_id' as the primary key and a text column 'name' for the agent's name.",
        "answer": "CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT);",
        "setup": "DROP TABLE IF EXISTS agents;"
    },
    {
        "question": "Create a table named \"gadgets\" with an integer primary key 'gadget_id', a text column 'gadget_name' for the gadget's name, and a text column 'type' for the gadget type.",
        "answer": "CREATE TABLE gadgets (gadget_id INTEGER PRIMARY KEY, gadget_name TEXT, type TEXT);",
        "setup": "DROP TABLE IF EXISTS gadgets;"
    },
    {
        "question": "Remove the table \"gadgets\" from the database if it exists.",
        "answer": "DROP TABLE IF EXISTS gadgets;",
        "setup": "DROP TABLE IF EXISTS gadgets; CREATE TABLE gadgets (gadget_id INTEGER PRIMARY KEY, gadget_name TEXT, type TEXT);"
    },
    {
        "question": "Modify the \"agents\" table to add a new text column 'codename' for the agent's codename.",
        "answer": "ALTER TABLE agents ADD COLUMN codename TEXT;",
        "setup": "DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT);"
    },
    {
        "question": "Remove the table \"agents\" from the database.",
        "answer": "DROP TABLE agents;",
        "setup": "DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT, codename TEXT);"
    },
    {
        "question": "Design a table named \"agents\" that includes an integer column 'agent_id' as the primary key, a non-empty text column 'name' for the agent's name, a unique text column 'codename' for the agent's codename, and a text column 'status' for the agent's current status.",
        "answer": "CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);",
        "setup": "DROP TABLE IF EXISTS agents;"
    },
    {
        "question": "Create a table called \"missions\" with an integer primary key 'mission_id', a non-empty text column 'title' for the mission title, an integer column 'agent_id' to associate the mission with an agent, and a text column 'target_name' for the mission's target. Ensure that 'agent_id' is a foreign key referencing the 'agent_id' in the \"agents\" table.",
        "answer": "CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
        "setup": "DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
    {
        "question": "Design a table named \"gadgets\" with an integer primary key 'gadget_id', a unique non-empty text column 'name' for the gadget's name, a text column 'type' for the gadget type, and a text column 'description' for its description.",
        "answer": "CREATE TABLE gadgets (gadget_id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE, type TEXT, description TEXT);",
        "setup": "DROP TABLE IF EXISTS gadgets;"
    },
    {
        "question": "Create a table named \"targets\" that includes an integer primary key 'target_id', a non-empty text column 'name' for the target's name, a text column 'nationality' for nationality, and an integer column 'threat_level' indicating the threat level.",
        "answer": "CREATE TABLE targets (target_id INTEGER PRIMARY KEY, name TEXT NOT NULL, nationality TEXT, threat_level INTEGER);",
        "setup": "DROP TABLE IF EXISTS targets;"
    },
    {
        "question": "Modify the \"agents\" table to add a new text column 'license_expiry' that records the expiration date of the agent's license.",
        "answer": "ALTER TABLE agents ADD COLUMN license_expiry TEXT;",
        "setup": "DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
    {
        "question": "Design a table named \"intel_reports\" with an integer primary key 'report_id', an integer column 'mission_id' linking the report to a mission, a text column 'date' for the date of the report, and a text column 'details' for detailed information. Ensure that 'mission_id' is a foreign key referencing the 'mission_id' in the \"missions\" table.",
        "answer": "CREATE TABLE intel_reports (report_id INTEGER PRIMARY KEY, mission_id INTEGER, date TEXT, details TEXT, FOREIGN KEY (mission_id) REFERENCES missions(mission_id));",
        "setup": "DROP TABLE IF EXISTS intel_reports; DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
    },
    {
        "question": "Design a table named \"safe_houses\" with an integer primary key 'house_id', a non-empty text column 'location' for the location, and an integer column 'capacity' indicating the house's capacity.",
        "answer": "CREATE TABLE safe_houses (house_id INTEGER PRIMARY KEY, location TEXT NOT NULL, capacity INTEGER);",
        "setup": "DROP TABLE IF EXISTS safe_houses;"
    },
    {
        "question": "Modify the \"missions\" table to rename the column 'target' to 'target_name'.",
        "answer": "ALTER TABLE missions RENAME COLUMN target TO target_name;",
        "setup": "DROP TABLE IF EXISTS missions; CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
    },
    {
        "question": "Create a table named \"allies\" with an integer primary key 'ally_id', a non-empty text column 'name' for the ally's name, and a text column 'country' for their country of origin.",
        "answer": "CREATE TABLE allies (ally_id INTEGER PRIMARY KEY, name TEXT NOT NULL, country TEXT);",
        "setup": "DROP TABLE IF EXISTS allies;"
    },
    {
        "question": "Design a table named \"agent_gadgets\" to represent a many-to-many relationship between agents and gadgets. Include integer columns 'agent_id' and 'gadget_id' that reference the 'agent_id' in the \"agents\" table and the 'gadget_id' in the \"gadgets\" table respectively.",
        "answer": "CREATE TABLE agent_gadgets (agent_id INTEGER, gadget_id INTEGER, FOREIGN KEY (agent_id) REFERENCES agents(agent_id), FOREIGN KEY (gadget_id) REFERENCES gadgets(gadget_id));",
        "setup": "DROP TABLE IF EXISTS agent_gadgets; DROP TABLE IF EXISTS agents; DROP TABLE IF EXISTS gadgets; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE gadgets (gadget_id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE, type TEXT, description TEXT);"
    },
    {
        "question": "Create a table named \"contacts\" with an integer primary key 'contact_id', an integer column 'agent_id' linking to an agent, a non-empty text column 'name' for the contact's name, and a text column 'relation' describing their relation to the agent. Ensure that 'agent_id' is a foreign key referencing the 'agent_id' in the \"agents\" table.",
        "answer": "CREATE TABLE contacts (contact_id INTEGER PRIMARY KEY, agent_id INTEGER, name TEXT NOT NULL, relation TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
        "setup": "DROP TABLE IF EXISTS contacts; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
    {
        "question": "Modify the \"agents\" table to include a new text column 'rank' with a default value of 'Operative'.",
        "answer": "ALTER TABLE agents ADD COLUMN rank TEXT DEFAULT 'Operative';",
        "setup": "DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
    {
        "question": "Design a table named \"intel_sources\" with an integer primary key 'source_id', a non-empty text column 'name' for the source's name, and a real number column 'credibility' indicating the source's credibility.",
        "answer": "CREATE TABLE intel_sources (source_id INTEGER PRIMARY KEY, name TEXT NOT NULL, credibility REAL);",
        "setup": "DROP TABLE IF EXISTS intel_sources;"
    },
    {
        "question": "Create a table named \"source_reports\" to represent a many-to-many relationship between intel sources and intel reports. Include integer columns 'source_id' and 'report_id' that reference the 'source_id' in the \"intel_sources\" table and the 'report_id' in the \"intel_reports\" table respectively.",
        "answer": "CREATE TABLE source_reports (source_id INTEGER, report_id INTEGER, FOREIGN KEY (source_id) REFERENCES intel_sources(source_id), FOREIGN KEY (report_id) REFERENCES intel_reports(report_id));",
        "setup": "DROP TABLE IF EXISTS source_reports; DROP TABLE IF EXISTS intel_sources; DROP TABLE IF EXISTS intel_reports; CREATE TABLE intel_sources (source_id INTEGER PRIMARY KEY, name TEXT NOT NULL, credibility REAL); CREATE TABLE intel_reports (report_id INTEGER PRIMARY KEY, mission_id INTEGER, date TEXT, details TEXT, FOREIGN KEY (mission_id) REFERENCES missions(mission_id));"
    },
    {
        "question": "Design a table named \"disguises\" with an integer primary key 'disguise_id', a non-empty text column 'type' for the type of disguise, and a text column 'description' for its description.",
        "answer": "CREATE TABLE disguises (disguise_id INTEGER PRIMARY KEY, type TEXT NOT NULL, description TEXT);",
        "setup": "DROP TABLE IF EXISTS disguises;"
    },
    {
        "question": "Modify the \"agents\" table to remove the column 'status'.",
        "answer": "ALTER TABLE agents DROP COLUMN status;",
        "setup": "DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
    {
        "question": "Design a table named \"allied_agents\" to represent a many-to-many relationship between spy networks and agents. Include integer columns 'network_id' and 'agent_id' that reference the 'network_id' in the \"spy_networks\" table and the 'agent_id' in the \"agents\" table respectively.",
        "answer": "CREATE TABLE allied_agents (agent_id INTEGER, ally_id INTEGER, FOREIGN KEY (agent_id) REFERENCES agents(agent_id), FOREIGN KEY (ally_id) REFERENCES allies(ally_id));",
        "setup": "DROP TABLE IF EXISTS allied_agents; DROP TABLE IF EXISTS agents; DROP TABLE IF EXISTS allies; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE allies (ally_id INTEGER PRIMARY KEY, name TEXT NOT NULL, country TEXT);"
    },
    {
        "question": "Design a table named \"missions_completed\" with an integer primary key 'mission_id', a text column 'completion_date' for the completion date, and a boolean column 'success' indicating the success of the mission. Ensure that 'mission_id' is a foreign key referencing the 'mission_id' in the \"missions\" table.",
        "answer": "CREATE TABLE missions_completed (mission_id INTEGER PRIMARY KEY, completion_date TEXT, success BOOLEAN, FOREIGN KEY (mission_id) REFERENCES missions(mission_id));",
        "setup": "DROP TABLE IF EXISTS missions_completed; DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
    },
    {
        "question": "Design a table named \"encryption_keys\" with an integer primary key 'key_id', a unique non-empty text column 'key_value' for the key value, and an integer column 'assigned_agent' to assign the key to an agent. Ensure that 'assigned_agent' is a foreign key referencing the 'agent_id' in the \"agents\" table.",
        "answer": "CREATE TABLE encryption_keys (key_id INTEGER PRIMARY KEY, key_value TEXT NOT NULL UNIQUE, assigned_agent INTEGER, FOREIGN KEY (assigned_agent) REFERENCES agents(agent_id));",
        "setup": "DROP TABLE IF EXISTS encryption_keys; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
    },
     {
            "question": "Create a table named \"secure_files\" with an integer primary key 'file_id', a non-empty text column 'filename' for the name of the file, a BLOB column 'data' for the file content, and a text column 'encryption_method' that must be either 'AES', 'RSA', or '3DES'. Include a CHECK constraint to enforce the 'encryption_method' values.",
            "answer": "CREATE TABLE secure_files (file_id INTEGER PRIMARY KEY, filename TEXT NOT NULL, data BLOB, encryption_method TEXT CHECK(encryption_method IN ('AES', 'RSA', '3DES')));",
            "setup": "DROP TABLE IF EXISTS secure_files;"
        },
        {
            "question": "Design a table named \"agent_health_records\" that includes an integer primary key 'record_id', an integer column 'agent_id' linking to an agent, a date column 'checkup_date' for the date of health checkup, and a real number column 'body_temperature' for the agent's body temperature. Ensure that 'body_temperature' is between 35.0 and 42.0 degrees Celsius using a CHECK constraint. 'agent_id' is a foreign key referencing 'agent_id' in the \"agents\" table.",
            "answer": "CREATE TABLE agent_health_records (record_id INTEGER PRIMARY KEY, agent_id INTEGER, checkup_date DATE, body_temperature REAL CHECK(body_temperature BETWEEN 35.0 AND 42.0), FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
            "setup": "DROP TABLE IF EXISTS agent_health_records; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
        },
        {
            "question": "Create a table named \"equipment\" with an integer primary key 'equipment_id', a non-empty text column 'name' for the equipment's name, a numeric column 'cost' with two decimal places indicating the cost, and an integer column 'quantity' with a default value of 1. Include a CHECK constraint to ensure 'cost' is greater than 0.",
            "answer": "CREATE TABLE equipment (equipment_id INTEGER PRIMARY KEY, name TEXT NOT NULL, cost NUMERIC(10,2) CHECK(cost > 0), quantity INTEGER DEFAULT 1);",
            "setup": "DROP TABLE IF EXISTS equipment;"
        },
        {
            "question": "Design a table named \"mission_schedule\" with an integer primary key 'schedule_id', an integer column 'mission_id' linking to a mission, a datetime column 'start_time' for the mission start time, and a datetime column 'end_time' for the mission end time. Ensure that 'end_time' is after 'start_time' using a CHECK constraint. 'mission_id' is a foreign key referencing 'mission_id' in the \"missions\" table.",
            "answer": "CREATE TABLE mission_schedule (schedule_id INTEGER PRIMARY KEY, mission_id INTEGER, start_time DATETIME, end_time DATETIME, CHECK(end_time > start_time), FOREIGN KEY (mission_id) REFERENCES missions(mission_id));",
            "setup": "DROP TABLE IF EXISTS mission_schedule; DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
        },
        {
            "question": "Create a table named \"training_sessions\" with an integer primary key 'session_id', a text column 'session_name' for the name of the session, a text column 'difficulty_level' that must be 'Beginner', 'Intermediate', or 'Expert' enforced by a CHECK constraint, and an integer column 'duration_minutes' indicating the duration in minutes, which must be a positive integer.",
            "answer": "CREATE TABLE training_sessions (session_id INTEGER PRIMARY KEY, session_name TEXT, difficulty_level TEXT CHECK(difficulty_level IN ('Beginner', 'Intermediate', 'Expert')), duration_minutes INTEGER CHECK(duration_minutes > 0));",
            "setup": "DROP TABLE IF EXISTS training_sessions;"
        },
        {
            "question": "Design a table named \"agent_performance\" with an integer primary key 'performance_id', an integer column 'agent_id' linking to an agent, a date column 'evaluation_date' for the date of evaluation, a numeric column 'score' between 0 and 100 inclusive, enforced by a CHECK constraint. 'agent_id' is a foreign key referencing 'agent_id' in the \"agents\" table.",
            "answer": "CREATE TABLE agent_performance (performance_id INTEGER PRIMARY KEY, agent_id INTEGER, evaluation_date DATE, score NUMERIC CHECK(score BETWEEN 0 AND 100), FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
            "setup": "DROP TABLE IF EXISTS agent_performance; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
        },
        {
            "question": "Create a table named \"classified_documents\" with an integer primary key 'document_id', a non-empty text column 'title' for the document's title, a BLOB column 'content' for the document content, and a text column 'classification_level' that must be one of 'Confidential', 'Secret', or 'Top Secret', enforced by a CHECK constraint.",
            "answer": "CREATE TABLE classified_documents (document_id INTEGER PRIMARY KEY, title TEXT NOT NULL, content BLOB, classification_level TEXT CHECK(classification_level IN ('Confidential', 'Secret', 'Top Secret')));",
            "setup": "DROP TABLE IF EXISTS classified_documents;"
        },
        {
            "question": "Design a table named \"vehicle_registry\" with an integer primary key 'vehicle_id', a non-empty text column 'license_plate' for the vehicle's license plate, a text column 'vehicle_type' that must be 'Car', 'Motorcycle', or 'Truck' enforced by a CHECK constraint, and a BOOLEAN column 'armored' indicating if the vehicle is armored.",
            "answer": "CREATE TABLE vehicle_registry (vehicle_id INTEGER PRIMARY KEY, license_plate TEXT NOT NULL, vehicle_type TEXT CHECK(vehicle_type IN ('Car', 'Motorcycle', 'Truck')), armored BOOLEAN);",
            "setup": "DROP TABLE IF EXISTS vehicle_registry;"
        },
        {
            "question": "Create a table named \"agent_languages\" to represent the languages known by agents. Include integer columns 'agent_id' and 'language_id', where 'language_id' references 'language_id' in the \"languages\" table. Ensure that the combination of 'agent_id' and 'language_id' is unique to prevent duplicates.",
            "answer": "CREATE TABLE agent_languages (agent_id INTEGER, language_id INTEGER, UNIQUE(agent_id, language_id), FOREIGN KEY (agent_id) REFERENCES agents(agent_id), FOREIGN KEY (language_id) REFERENCES languages(language_id));",
            "setup": "DROP TABLE IF EXISTS agent_languages; DROP TABLE IF EXISTS agents; DROP TABLE IF EXISTS languages; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE languages (language_id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);"
        },
        {
            "question": "Design a table named \"safe_house_bookings\" with an integer primary key 'booking_id', an integer column 'house_id' referencing 'house_id' in \"safe_houses\", an integer column 'agent_id' referencing 'agent_id' in \"agents\", a DATE column 'check_in' and a DATE column 'check_out'. Include a CHECK constraint to ensure 'check_out' is after 'check_in'.",
            "answer": "CREATE TABLE safe_house_bookings (booking_id INTEGER PRIMARY KEY, house_id INTEGER, agent_id INTEGER, check_in DATE, check_out DATE, CHECK(check_out > check_in), FOREIGN KEY (house_id) REFERENCES safe_houses(house_id), FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
            "setup": "DROP TABLE IF EXISTS safe_house_bookings; DROP TABLE IF EXISTS safe_houses; DROP TABLE IF EXISTS agents; CREATE TABLE safe_houses (house_id INTEGER PRIMARY KEY, location TEXT NOT NULL, capacity INTEGER); CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
        },
        {
            "question": "Create a table named \"agent_accounts\" with an integer primary key 'account_id', an integer column 'agent_id' referencing 'agent_id' in \"agents\", a text column 'username', a text column 'password_hash' to store the hashed password, and a DATETIME column 'last_login'. Include a CHECK constraint to ensure 'username' is at least 5 characters long.",
            "answer": "CREATE TABLE agent_accounts (account_id INTEGER PRIMARY KEY, agent_id INTEGER, username TEXT CHECK(length(username) >= 5), password_hash TEXT, last_login DATETIME, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
            "setup": "DROP TABLE IF EXISTS agent_accounts; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
        },
        {
            "question": "Design a table named \"budget_allocations\" with an integer primary key 'allocation_id', a text column 'department' for the department name, a NUMERIC column 'allocated_funds' indicating allocated funds with two decimal places, and a NUMERIC column 'spent_funds' indicating funds spent. Include a CHECK constraint to ensure 'spent_funds' does not exceed 'allocated_funds'.",
            "answer": "CREATE TABLE budget_allocations (allocation_id INTEGER PRIMARY KEY, department TEXT, allocated_funds NUMERIC(12,2), spent_funds NUMERIC(12,2), CHECK(spent_funds <= allocated_funds));",
            "setup": "DROP TABLE IF EXISTS budget_allocations;"
        },
        {
            "question": "Create a table named \"mission_objectives\" with an integer primary key 'objective_id', an integer column 'mission_id' referencing 'mission_id' in \"missions\", a text column 'description' for the objective, and a BOOLEAN column 'completed' with a default value of 'false'.",
            "answer": "CREATE TABLE mission_objectives (objective_id INTEGER PRIMARY KEY, mission_id INTEGER, description TEXT, completed BOOLEAN DEFAULT false, FOREIGN KEY (mission_id) REFERENCES missions(mission_id));",
            "setup": "DROP TABLE IF EXISTS mission_objectives; DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
        },
        {
            "question": "Design a table named \"agent_certifications\" with an integer primary key 'certification_id', an integer column 'agent_id' referencing 'agent_id' in \"agents\", a text column 'certification_name', and a DATE column 'expiry_date'. Include a CHECK constraint to ensure 'expiry_date' is in the future.",
            "answer": "CREATE TABLE agent_certifications (certification_id INTEGER PRIMARY KEY, agent_id INTEGER, certification_name TEXT, expiry_date DATE CHECK(expiry_date > DATE('now')), FOREIGN KEY (agent_id) REFERENCES agents(agent_id));",
            "setup": "DROP TABLE IF EXISTS agent_certifications; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT);"
        },
        {
            "question": "Create a table named \"mission_ratings\" with an integer primary key 'rating_id', an integer column 'mission_id' referencing 'mission_id' in \"missions\", an integer column 'rating' between 1 and 5 inclusive enforced by a CHECK constraint, and a text column 'comments'.",
            "answer": "CREATE TABLE mission_ratings (rating_id INTEGER PRIMARY KEY, mission_id INTEGER, rating INTEGER CHECK(rating BETWEEN 1 AND 5), comments TEXT, FOREIGN KEY (mission_id) REFERENCES missions(mission_id));",
            "setup": "DROP TABLE IF EXISTS mission_ratings; DROP TABLE IF EXISTS missions; DROP TABLE IF EXISTS agents; CREATE TABLE agents (agent_id INTEGER PRIMARY KEY, name TEXT NOT NULL, codename TEXT UNIQUE, status TEXT); CREATE TABLE missions (mission_id INTEGER PRIMARY KEY, title TEXT NOT NULL, agent_id INTEGER, target_name TEXT, FOREIGN KEY (agent_id) REFERENCES agents(agent_id));"
        }
    ]
