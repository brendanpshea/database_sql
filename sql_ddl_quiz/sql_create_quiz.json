[
    {
        "instruction": "Welcome to the Spy Academy database training! Create a table named <code>agents</code> with the following columns and constraints:<ul><li><code>agent_id</code> (INTEGER, Primary Key)</li><li><code>codename</code> (TEXT, NOT NULL, UNIQUE)</li><li><code>real_name</code> (TEXT, NOT NULL)</li></ul>",
        "check": {
            "query": "PRAGMA table_info(agents);",
            "expected": [
                [0, "agent_id", "INTEGER", 0, null, 1],
                [1, "codename", "TEXT", 1, null, 0],
                [2, "real_name", "TEXT", 1, null, 0]
            ],
            "explanation": "The 'agents' table should have 'codename' as NOT NULL and UNIQUE, and 'real_name' as NOT NULL."
        },
        "hint": "Use CREATE TABLE with NOT NULL and UNIQUE constraints."
    },
    {
        "instruction": "Insert a new agent into the <code>agents</code> table:<ul><li>agent_id: 1, codename: 'Eagle', real_name: 'Ethan Hunt'</li></ul>",
        "check": {
            "query": "SELECT * FROM agents;",
            "expected": [
                [1, "Eagle", "Ethan Hunt"]
            ],
            "explanation": "The 'agents' table should contain one row with the specified data."
        },
        "hint": "Use INSERT INTO with VALUES to insert the row."
    },
    {
        "instruction": "Create a table named <code>missions</code> with the following columns and constraints:<ul><li><code>mission_id</code> (INTEGER, Primary Key)</li><li><code>mission_name</code> (TEXT, NOT NULL, UNIQUE)</li><li><code>location</code> (TEXT, NOT NULL)</li></ul>Add a CHECK constraint to ensure that <code>location</code> is not an empty string.",
        "check": {
            "query": "PRAGMA table_info(missions);",
            "expected": [
                [0, "mission_id", "INTEGER", 0, null, 1],
                [1, "mission_name", "TEXT", 1, null, 0],
                [2, "location", "TEXT", 1, null, 0]
            ],
            "explanation": "The 'missions' table should have 'mission_name' and 'location' as NOT NULL, with 'mission_name' UNIQUE."
        },
        "hint": "Use CREATE TABLE with NOT NULL, UNIQUE, and CHECK constraints."
    },
    {
        "instruction": "Insert a mission into the <code>missions</code> table:<ul><li>mission_id: 101, mission_name: 'Operation Silent Night', location: 'Berlin'</li></ul>",
        "check": {
            "query": "SELECT * FROM missions;",
            "expected": [
                [101, "Operation Silent Night", "Berlin"]
            ],
            "explanation": "The 'missions' table should contain one row with the specified data."
        },
        "hint": "Ensure that the values satisfy the NOT NULL and CHECK constraints."
    },
    {
        "instruction": "Create a table named <code>assignments</code> with the following columns and constraints:<ul><li><code>agent_id</code> (INTEGER, NOT NULL)</li><li><code>mission_id</code> (INTEGER, NOT NULL)</li></ul>Set up foreign keys so that <code>agent_id</code> references <code>agents(agent_id)</code> and <code>mission_id</code> references <code>missions(mission_id)</code>.",
        "check": {
            "query": "PRAGMA foreign_key_list(assignments);",
            "expected": [
                [0, "main", "agents", "agent_id", "agent_id", "NO ACTION", "NO ACTION", "NONE"],
                [1, "main", "missions", "mission_id", "mission_id", "NO ACTION", "NO ACTION", "NONE"]
            ],
            "explanation": "The 'assignments' table should have foreign key constraints on 'agent_id' and 'mission_id'."
        },
        "hint": "Use CREATE TABLE with FOREIGN KEY constraints and specify columns as NOT NULL."
    },
    {
        "instruction": "Insert an assignment into the <code>assignments</code> table:<ul><li>agent_id: 1, mission_id: 101</li></ul>",
        "check": {
            "query": "SELECT * FROM assignments;",
            "expected": [
                [1, 101]
            ],
            "explanation": "The 'assignments' table should contain one row linking Agent 1 to Mission 101."
        },
        "hint": "Use INSERT INTO with VALUES, ensuring foreign key constraints are satisfied."
    },
    {
        "instruction": "Alter the <code>agents</code> table to add a new column <code>clearance_level</code> (INTEGER) with a CHECK constraint that it must be between 1 and 5.",
        "check": {
            "query": "PRAGMA table_info(agents);",
            "expected": [
                [0, "agent_id", "INTEGER", 0, null, 1],
                [1, "codename", "TEXT", 1, null, 0],
                [2, "real_name", "TEXT", 1, null, 0],
                [3, "clearance_level", "INTEGER", 0, null, 0]
            ],
            "explanation": "The 'agents' table should now include the 'clearance_level' column."
        },
        "hint": "Use ALTER TABLE to ADD COLUMN with a CHECK constraint."
    },
    {
        "instruction": "Create a table named <code>gadgets</code> with the following columns and constraints:<ul><li><code>gadget_id</code> (INTEGER, Primary Key)</li><li><code>gadget_name</code> (TEXT, NOT NULL)</li><li><code>assigned_agent_id</code> (INTEGER)</li></ul>Set up a foreign key so that <code>assigned_agent_id</code> references <code>agents(agent_id)</code>.",
        "check": {
            "query": "PRAGMA table_info(gadgets);",
            "expected": [
                [0, "gadget_id", "INTEGER", 0, null, 1],
                [1, "gadget_name", "TEXT", 1, null, 0],
                [2, "assigned_agent_id", "INTEGER", 0, null, 0]
            ],
            "explanation": "The 'gadgets' table should have 'gadget_name' as NOT NULL and a foreign key on 'assigned_agent_id'."
        },
        "hint": "Use CREATE TABLE with NOT NULL and FOREIGN KEY constraints."
    },
    {
        "instruction": "Insert a gadget into the <code>gadgets</code> table:<ul><li>gadget_id: 501, gadget_name: 'Invisible Suit', assigned_agent_id: 1</li></ul>",
        "check": {
            "query": "SELECT * FROM gadgets;",
            "expected": [
                [501, "Invisible Suit", 1]
            ],
            "explanation": "The 'gadgets' table should contain one row with the specified data."
        },
        "hint": "Ensure that the 'assigned_agent_id' exists in 'agents' table."
    },
    {
        "instruction": "Drop the table <code>gadgets</code> from the database.",
        "check": {
            "query": "SELECT name FROM sqlite_master WHERE type='table' AND name='gadgets';",
            "expected": [],
            "explanation": "The 'gadgets' table should be dropped from the database."
        },
        "hint": "Use DROP TABLE to remove the table."
    },
    {
        "instruction": "Create a table named <code>safehouses</code> with the following columns and constraints:<ul><li><code>safehouse_id</code> (INTEGER, Primary Key)</li><li><code>location</code> (TEXT, NOT NULL)</li><li><code>capacity</code> (INTEGER, NOT NULL)</li></ul>Add a CHECK constraint to ensure that <code>capacity</code> is greater than 0.</li>",
        "check": {
            "query": "PRAGMA table_info(safehouses);",
            "expected": [
                [0, "safehouse_id", "INTEGER", 0, null, 1],
                [1, "location", "TEXT", 1, null, 0],
                [2, "capacity", "INTEGER", 1, null, 0]
            ],
            "explanation": "The 'safehouses' table should have 'location' and 'capacity' as NOT NULL, with a CHECK constraint on 'capacity'."
        },
        "hint": "Use CREATE TABLE with NOT NULL and CHECK constraints."
    },
    {
        "instruction": "Insert a safehouse into the <code>safehouses</code> table:<ul><li>safehouse_id: 301, location: 'London', capacity: 5</li></ul>",
        "check": {
            "query": "SELECT * FROM safehouses;",
            "expected": [
                [301, "London", 5]
            ],
            "explanation": "The 'safehouses' table should contain one row with the specified data."
        },
        "hint": "Ensure that the 'capacity' value satisfies the CHECK constraint."
    },
    {
        "instruction": "Alter the <code>missions</code> table to add a new column <code>required_clearance</code> (INTEGER NOT NULL) with a default value of 3.",
        "check": {
            "query": "PRAGMA table_info(missions);",
            "expected": [
                [0, "mission_id", "INTEGER", 0, null, 1],
                [1, "mission_name", "TEXT", 1, null, 0],
                [2, "location", "TEXT", 1, null, 0],
                [3, "required_clearance", "INTEGER", 1, "3", 0]
            ],
            "explanation": "The 'missions' table should now include the 'required_clearance' column with a default value."
        },
        "hint": "Use ALTER TABLE to ADD COLUMN with NOT NULL and DEFAULT constraints."
    },
    {
        "instruction": "Create a table named <code>agencies</code> with the following columns and constraints:<ul><li><code>agency_id</code> (INTEGER, Primary Key)</li><li><code>agency_name</code> (TEXT, NOT NULL, UNIQUE)</li></ul>",
        "check": {
            "query": "PRAGMA table_info(agencies);",
            "expected": [
                [0, "agency_id", "INTEGER", 0, null, 1],
                [1, "agency_name", "TEXT", 1, null, 0]
            ],
            "explanation": "The 'agencies' table should have 'agency_name' as NOT NULL and UNIQUE."
        },
        "hint": "Use CREATE TABLE with NOT NULL and UNIQUE constraints."
    },
    {
        "instruction": "Insert an agency into the <code>agencies</code> table:<ul><li>agency_id: 1, agency_name: 'IMF'</li></ul>",
        "check": {
            "query": "SELECT * FROM agencies;",
            "expected": [
                [1, "IMF"]
            ],
            "explanation": "The 'agencies' table should contain one row with the specified data."
        },
        "hint": "Use INSERT INTO with VALUES to insert the row."
    },
    {
        "instruction": "Alter the <code>agents</code> table to add a new column <code>agency_id</code> (INTEGER) with a foreign key constraint referencing <code>agencies(agency_id)</code>.",
        "check": {
            "query": "PRAGMA table_info(agents);",
            "expected": [
                [0, "agent_id", "INTEGER", 0, null, 1],
                [1, "codename", "TEXT", 1, null, 0],
                [2, "real_name", "TEXT", 1, null, 0],
                [3, "clearance_level", "INTEGER", 0, null, 0],
                [4, "agency_id", "INTEGER", 0, null, 0]
            ],
            "explanation": "The 'agents' table should now include the 'agency_id' column."
        },
        "hint": "Use ALTER TABLE to ADD COLUMN with a FOREIGN KEY constraint."
    },
    {
        "instruction": "Insert a new agent into the <code>agents</code> table:<ul><li>agent_id: 2, codename: 'Falcon', real_name: 'Natasha Romanoff', clearance_level: 4, agency_id: 1</li></ul>",
        "check": {
            "query": "SELECT * FROM agents WHERE agent_id = 2;",
            "expected": [
                [2, "Falcon", "Natasha Romanoff", null, 1]
            ],
            "explanation": "The 'agents' table should contain the new agent with the specified data."
        },
        "hint": "Ensure that 'agency_id' exists in 'agencies' table and constraints are satisfied."
    },
    {
        "instruction": "Drop the table <code>assignments</code> from the database.",
        "check": {
            "query": "SELECT name FROM sqlite_master WHERE type='table' AND name='assignments';",
            "expected": [],
            "explanation": "The 'assignments' table should be dropped from the database."
        },
        "hint": "Use DROP TABLE to remove the table."
    },
    {
        "instruction": "Create a table named <code>agent_skills</code> with the following columns and constraints:<ul><li><code>agent_id</code> (INTEGER, NOT NULL)</li><li><code>skill</code> (TEXT, NOT NULL)</li></ul>Set up a primary key on both columns and a CHECK constraint that <code>skill</code> is not an empty string.",
        "check": {
            "query": "PRAGMA table_info(agent_skills);",
            "expected": [
                [0, "agent_id", "INTEGER", 1, null, 1],
                [1, "skill", "TEXT", 1, null, 2]
            ],
            "explanation": "The 'agent_skills' table should have a composite primary key on 'agent_id' and 'skill', with NOT NULL constraints."
        },
        "hint": "Use CREATE TABLE with PRIMARY KEY(agent_id, skill) and CHECK constraints."
    },
    {
        "instruction": "Insert a skill for Agent 1 into the <code>agent_skills</code> table:<ul><li>agent_id: 1, skill: 'Stealth'</li></ul>",
        "check": {
            "query": "SELECT * FROM agent_skills;",
            "expected": [
                [1, "Stealth"]
            ],
            "explanation": "The 'agent_skills' table should contain one row with the specified data."
        },
        "hint": "Ensure that the 'skill' value satisfies the NOT NULL and CHECK constraints."
    }
]
