[
    {
        "instruction": "Create a table named <code>artists</code> with the following columns:<ul><li><code>artist_id</code> (INTEGER, PRIMARY KEY)</li><li><code>artist_name</code> (TEXT, NOT NULL)</li></ul>",
        "check": {
            "query": "PRAGMA table_info(artists);",
            "expected": [
                [0, "artist_id", "INTEGER", 0, null, 1],
                [1, "artist_name", "TEXT", 1, null, 0]
            ],
            "explanation": "The 'artists' table should have columns 'artist_id' (INTEGER PRIMARY KEY) and 'artist_name' (TEXT NOT NULL)."
        },
        "hint": "Use CREATE TABLE with column definitions, specify PRIMARY KEY for 'artist_id' and NOT NULL for 'artist_name'."
    },
    {
        "instruction": "Insert the following artists into the <code>artists</code> table:<ul><li>artist_id: 1, artist_name: 'Pink Floyd'</li><li>artist_id: 2, artist_name: 'Paramore'</li><li>artist_id: 3, artist_name: 'Prince'</li><li>artist_id: 4, artist_name: 'Pink'</li></ul>",
        "check": {
            "query": "SELECT * FROM artists ORDER BY artist_id;",
            "expected": [
                [1, "Pink Floyd"],
                [2, "Paramore"],
                [3, "Prince"],
                [4, "Pink"]
            ],
            "explanation": "The 'artists' table should contain four rows with the specified data."
        },
        "hint": "Use INSERT INTO with VALUES to insert multiple rows."
    },
    {
        "instruction": "Create a table named <code>albums</code> with the following columns:<ul><li><code>album_id</code> (INTEGER, PRIMARY KEY)</li><li><code>album_name</code> (TEXT, NOT NULL)</li><li><code>artist_id</code> (INTEGER, NOT NULL)</li></ul>Set up a foreign key so that <code>artist_id</code> references <code>artists(artist_id)</code>.",
        "check": {
            "query": "PRAGMA foreign_key_list(albums);",
            "expected": [
                [0, "main", "artists", "artist_id", "artist_id", "NO ACTION", "NO ACTION", "NONE"]
            ],
            "explanation": "The 'albums' table should have a foreign key constraint on 'artist_id' referencing 'artists(artist_id)'."
        },
        "hint": "Use CREATE TABLE with a FOREIGN KEY constraint."
    },
    {
        "instruction": "Insert the following albums into the <code>albums</code> table:<ul><li>album_id: 1, album_name: 'The Dark Side of the Moon', artist_id: 1</li><li>album_id: 2, album_name: 'Brand New Eyes', artist_id: 2</li><li>album_id: 3, album_name: 'Purple Rain', artist_id: 3</li><li>album_id: 4, album_name: 'Funhouse', artist_id: 4</li></ul>",
        "check": {
            "query": "SELECT * FROM albums ORDER BY album_id;",
            "expected": [
                [1, "The Dark Side of the Moon", 1],
                [2, "Brand New Eyes", 2],
                [3, "Purple Rain", 3],
                [4, "Funhouse", 4]
            ],
            "explanation": "The 'albums' table should contain four rows with the specified data."
        },
        "hint": "Use INSERT INTO with VALUES to insert multiple rows."
    },
    {
        "instruction": "Create a table named <code>songs</code> with the following columns:<ul><li><code>song_id</code> (INTEGER, PRIMARY KEY)</li><li><code>song_name</code> (TEXT, NOT NULL)</li><li><code>album_id</code> (INTEGER, NOT NULL)</li></ul>Set up a foreign key so that <code>album_id</code> references <code>albums(album_id)</code>.",
        "check": {
            "query": "PRAGMA foreign_key_list(songs);",
            "expected": [
                [0, "main", "albums", "album_id", "album_id", "NO ACTION", "NO ACTION", "NONE"]
            ],
            "explanation": "The 'songs' table should have a foreign key constraint on 'album_id' referencing 'albums(album_id)'."
        },
        "hint": "Use CREATE TABLE with a FOREIGN KEY constraint."
    },
    {
        "instruction": "Insert the following songs into the <code>songs</code> table:<ul><li>song_id: 1, song_name: 'Money', album_id: 1</li><li>song_id: 2, song_name: 'Misery Business', album_id: 2</li><li>song_id: 3, song_name: 'When Doves Cry', album_id: 3</li><li>song_id: 4, song_name: 'Sober', album_id: 4</li></ul>",
        "check": {
            "query": "SELECT * FROM songs ORDER BY song_id;",
            "expected": [
                [1, "Money", 1],
                [2, "Misery Business", 2],
                [3, "When Doves Cry", 3],
                [4, "Sober", 4]
            ],
            "explanation": "The 'songs' table should contain four rows with the specified data."
        },
        "hint": "Use INSERT INTO with VALUES to insert multiple rows."
    },
    {
        "instruction": "Update the <code>artist_name</code> of the artist with <code>artist_id</code> 2 to 'Paramore (Updated)'.",
        "check": {
            "query": "SELECT artist_name FROM artists WHERE artist_id = 2;",
            "expected": [
                ["Paramore (Updated)"]
            ],
            "explanation": "The 'artist_name' for artist_id 2 should be updated to 'Paramore (Updated)'."
        },
        "hint": "Use UPDATE with SET and WHERE clauses."
    },
    {
        "instruction": "Update the <code>album_name</code> of the album with <code>album_id</code> 4 to 'Funhouse (Deluxe Edition)'.",
        "check": {
            "query": "SELECT album_name FROM albums WHERE album_id = 4;",
            "expected": [
                ["Funhouse (Deluxe Edition)"]
            ],
            "explanation": "The 'album_name' for album_id 4 should be updated."
        },
        "hint": "Use UPDATE with SET and WHERE clauses."
    },
    {
        "instruction": "Delete the song with <code>song_id</code> 1 from the <code>songs</code> table.",
        "check": {
            "query": "SELECT * FROM songs WHERE song_id = 1;",
            "expected": [],
            "explanation": "The song with song_id 1 should no longer exist in the 'songs' table."
        },
        "hint": "Use DELETE FROM with a WHERE clause."
    },
    {
        "instruction": "Delete all songs associated with <code>album_id</code> 2 from the <code>songs</code> table.",
        "check": {
            "query": "SELECT * FROM songs WHERE album_id = 2;",
            "expected": [],
            "explanation": "There should be no songs associated with album_id 2."
        },
        "hint": "Use DELETE FROM with a WHERE clause."
    },
    {
        "instruction": "Insert a new song into the <code>songs</code> table:<ul><li>song_id: 5, song_name: 'Another Brick in the Wall', album_id: 1</li></ul>",
        "check": {
            "query": "SELECT * FROM songs WHERE song_id = 5;",
            "expected": [
                [5, "Another Brick in the Wall", 1]
            ],
            "explanation": "The 'songs' table should contain the new song."
        },
        "hint": "Use INSERT INTO with VALUES."
    },
    {
        "instruction": "Update all songs in the <code>songs</code> table to append ' (Remastered)' to their <code>song_name</code>.",
        "check": {
            "query": "SELECT song_name FROM songs ORDER BY song_id;",
            "expected": [
                ["When Doves Cry (Remastered)"],
                ["Sober (Remastered)"],
                ["Another Brick in the Wall (Remastered)"]
            ],
            "explanation": "All song names should have ' (Remastered)' appended."
        },
        "hint": "Use UPDATE without a WHERE clause and use concatenation in SET."
    },
    {
        "instruction": "Delete all songs from the <code>songs</code> table.",
        "check": {
            "query": "SELECT COUNT(*) FROM songs;",
            "expected": [
                [0]
            ],
            "explanation": "The 'songs' table should be empty."
        },
        "hint": "Use DELETE FROM without a WHERE clause."
    },
    {
        "instruction": "Insert multiple songs into the <code>songs</code> table:<ul><li>song_id: 6, song_name: 'Comfortably Numb', album_id: 1</li><li>song_id: 7, song_name: 'Brick by Boring Brick', album_id: 2</li></ul>",
        "check": {
            "query": "SELECT * FROM songs ORDER BY song_id;",
            "expected": [
                [6, "Comfortably Numb", 1],
                [7, "Brick by Boring Brick", 2]
            ],
            "explanation": "The 'songs' table should contain the new songs."
        },
        "hint": "Use INSERT INTO with multiple VALUES clauses."
    },
    {
        "instruction": "Update the <code>album_id</code> of <code>song_id</code> 7 to 4.",
        "check": {
            "query": "SELECT album_id FROM songs WHERE song_id = 7;",
            "expected": [
                [4]
            ],
            "explanation": "The 'album_id' of song_id 7 should be updated to 4."
        },
        "hint": "Use UPDATE with SET and WHERE clauses."
    },
    {
        "instruction": "Delete the album with <code>album_id</code> 3 from the <code>albums</code> table.",
        "check": {
            "query": "SELECT * FROM albums WHERE album_id = 3;",
            "expected": [],
            "explanation": "The album with album_id 3 should be deleted."
        },
        "hint": "Use DELETE FROM with a WHERE clause."
    },
    {
        "instruction": "Attempt to delete the artist with <code>artist_id</code> 1 from the <code>artists</code> table.",
        "check": {
            "query": "SELECT * FROM artists WHERE artist_id = 1;",
            "expected": [
                [1, "Pink Floyd"]
            ],
            "explanation": "The artist should not be deleted due to foreign key constraints."
        },
        "hint": "Consider the foreign key constraints."
    },
    {
        "instruction": "Update the <code>artist_id</code> of <code>album_id</code> 1 to 2.",
        "check": {
            "query": "SELECT artist_id FROM albums WHERE album_id = 1;",
            "expected": [
                [2]
            ],
            "explanation": "The 'artist_id' of album_id 1 should be updated to 2."
        },
        "hint": "Use UPDATE with SET and WHERE clauses."
    },
    {
        "instruction": "Now delete the artist with <code>artist_id</code> 1 from the <code>artists</code> table.",
        "check": {
            "query": "SELECT * FROM artists WHERE artist_id = 1;",
            "expected": [],
            "explanation": "The artist with artist_id 1 should be deleted."
        },
        "hint": "Use DELETE FROM with a WHERE clause."
    },
    {
        "instruction": "Insert a new artist into the <code>artists</code> table:<ul><li>artist_id: 5, artist_name: 'Panic! at the Disco'</li></ul>",
        "check": {
            "query": "SELECT * FROM artists WHERE artist_id = 5;",
            "expected": [
                [5, "Panic! at the Disco"]
            ],
            "explanation": "The 'artists' table should contain the new artist."
        },
        "hint": "Use INSERT INTO with VALUES."
    }
]
